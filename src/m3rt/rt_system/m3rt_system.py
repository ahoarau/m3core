# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_m3rt_system', [dirname(__file__)])
        except ImportError:
            import _m3rt_system
            return _m3rt_system
        if fp is not None:
            try:
                _mod = imp.load_module('_m3rt_system', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _m3rt_system = swig_import_helper()
    del swig_import_helper
else:
    import _m3rt_system
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _m3rt_system.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _m3rt_system.SwigPyIterator_value(self)
    def incr(self, n = 1): return _m3rt_system.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _m3rt_system.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _m3rt_system.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _m3rt_system.SwigPyIterator_equal(self, *args)
    def copy(self): return _m3rt_system.SwigPyIterator_copy(self)
    def next(self): return _m3rt_system.SwigPyIterator_next(self)
    def __next__(self): return _m3rt_system.SwigPyIterator___next__(self)
    def previous(self): return _m3rt_system.SwigPyIterator_previous(self)
    def advance(self, *args): return _m3rt_system.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _m3rt_system.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _m3rt_system.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _m3rt_system.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _m3rt_system.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _m3rt_system.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _m3rt_system.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _m3rt_system.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class M3RtService(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, M3RtService, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, M3RtService, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _m3rt_system.new_M3RtService()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _m3rt_system.delete_M3RtService
    __del__ = lambda self : None;
    def Startup(self): return _m3rt_system.M3RtService_Startup(self)
    def Shutdown(self): return _m3rt_system.M3RtService_Shutdown(self)
    def AttachRtSystem(self): return _m3rt_system.M3RtService_AttachRtSystem(self)
    def RemoveRtSystem(self): return _m3rt_system.M3RtService_RemoveRtSystem(self)
    def IsRtSystemOperational(self): return _m3rt_system.M3RtService_IsRtSystemOperational(self)
    def SetComponentStateSafeOp(self, *args): return _m3rt_system.M3RtService_SetComponentStateSafeOp(self, *args)
    def SetComponentStateOp(self, *args): return _m3rt_system.M3RtService_SetComponentStateOp(self, *args)
    def AttachDataService(self): return _m3rt_system.M3RtService_AttachDataService(self)
    def AttachRosService(self): return _m3rt_system.M3RtService_AttachRosService(self)
    def RemoveRosService(self): return _m3rt_system.M3RtService_RemoveRosService(self)
    def RemoveDataService(self, *args): return _m3rt_system.M3RtService_RemoveDataService(self, *args)
    def AttachLogService(self, *args): return _m3rt_system.M3RtService_AttachLogService(self, *args)
    def AddLogComponent(self, *args): return _m3rt_system.M3RtService_AddLogComponent(self, *args)
    def RemoveLogService(self): return _m3rt_system.M3RtService_RemoveLogService(self)
    def IsDataServiceRunning(self): return _m3rt_system.M3RtService_IsDataServiceRunning(self)
    def IsLogServiceRunning(self): return _m3rt_system.M3RtService_IsLogServiceRunning(self)
    def IsRosServiceRunning(self): return _m3rt_system.M3RtService_IsRosServiceRunning(self)
    def IsRtSystemRunning(self): return _m3rt_system.M3RtService_IsRtSystemRunning(self)
    def GetNumComponents(self): return _m3rt_system.M3RtService_GetNumComponents(self)
    def GetComponentName(self, *args): return _m3rt_system.M3RtService_GetComponentName(self, *args)
    def GetComponentType(self, *args): return _m3rt_system.M3RtService_GetComponentType(self, *args)
    def GetComponentState(self, *args): return _m3rt_system.M3RtService_GetComponentState(self, *args)
    def GetComponentIdx(self, *args): return _m3rt_system.M3RtService_GetComponentIdx(self, *args)
    def PrettyPrintComponent(self, *args): return _m3rt_system.M3RtService_PrettyPrintComponent(self, *args)
    def PrettyPrintRtSystem(self): return _m3rt_system.M3RtService_PrettyPrintRtSystem(self)
    def ClientSubscribeStatus(self, *args): return _m3rt_system.M3RtService_ClientSubscribeStatus(self, *args)
    def IsDataServiceError(self): return _m3rt_system.M3RtService_IsDataServiceError(self)
M3RtService_swigregister = _m3rt_system.M3RtService_swigregister
M3RtService_swigregister(M3RtService)

# This file is compatible with both classic and new-style classes.


