// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_component_5fbase_2eproto__INCLUDED
#define PROTOBUF_component_5fbase_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_component_5fbase_2eproto();
void protobuf_AssignDesc_component_5fbase_2eproto();
void protobuf_ShutdownFile_component_5fbase_2eproto();

class M3StatusAll;
class M3CommandAll;
class M3StatusLogPage;
class M3BaseStatus;
class M3EtherCATStatus;
class M3MonitorComponent;
class M3MonitorCommand;
class M3MonitorParam;
class M3MonitorStatus;
class M3MonitorEcDomain;

enum M3COMP_STATE {
  M3COMP_STATE_INIT = 0,
  M3COMP_STATE_ERR = 1,
  M3COMP_STATE_SAFEOP = 2,
  M3COMP_STATE_OP = 3
};
bool M3COMP_STATE_IsValid(int value);
const M3COMP_STATE M3COMP_STATE_MIN = M3COMP_STATE_INIT;
const M3COMP_STATE M3COMP_STATE_MAX = M3COMP_STATE_OP;

const ::google::protobuf::EnumDescriptor* M3COMP_STATE_descriptor();
inline const ::std::string& M3COMP_STATE_Name(M3COMP_STATE value) {
  return ::google::protobuf::internal::NameOfEnum(
    M3COMP_STATE_descriptor(), value);
}
inline bool M3COMP_STATE_Parse(
    const ::std::string& name, M3COMP_STATE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<M3COMP_STATE>(
    M3COMP_STATE_descriptor(), name, value);
}
// ===================================================================

class M3StatusAll : public ::google::protobuf::Message {
 public:
  M3StatusAll();
  virtual ~M3StatusAll();
  
  M3StatusAll(const M3StatusAll& from);
  
  inline M3StatusAll& operator=(const M3StatusAll& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const M3StatusAll& default_instance();
  void Swap(M3StatusAll* other);
  
  // implements Message ----------------------------------------------
  
  M3StatusAll* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3StatusAll& from);
  void MergeFrom(const M3StatusAll& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string name = 1;
  inline int name_size() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name();
  inline const ::std::string& name(int index) const;
  inline ::std::string* mutable_name(int index);
  inline void set_name(int index, const ::std::string& value);
  inline void set_name(int index, const char* value);
  inline void set_name(int index, const char* value, size_t size);
  inline ::std::string* add_name();
  inline void add_name(const ::std::string& value);
  inline void add_name(const char* value);
  inline void add_name(const char* value, size_t size);
  
  // repeated bytes datum = 2;
  inline int datum_size() const;
  inline void clear_datum();
  static const int kDatumFieldNumber = 2;
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& datum() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_datum();
  inline const ::std::string& datum(int index) const;
  inline ::std::string* mutable_datum(int index);
  inline void set_datum(int index, const ::std::string& value);
  inline void set_datum(int index, const char* value);
  inline void set_datum(int index, const void* value, size_t size);
  inline ::std::string* add_datum();
  inline void add_datum(const ::std::string& value);
  inline void add_datum(const char* value);
  inline void add_datum(const void* value, size_t size);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> datum_;
  friend void  protobuf_AddDesc_component_5fbase_2eproto();
  friend void protobuf_AssignDesc_component_5fbase_2eproto();
  friend void protobuf_ShutdownFile_component_5fbase_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static M3StatusAll* default_instance_;
};
// -------------------------------------------------------------------

class M3CommandAll : public ::google::protobuf::Message {
 public:
  M3CommandAll();
  virtual ~M3CommandAll();
  
  M3CommandAll(const M3CommandAll& from);
  
  inline M3CommandAll& operator=(const M3CommandAll& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const M3CommandAll& default_instance();
  void Swap(M3CommandAll* other);
  
  // implements Message ----------------------------------------------
  
  M3CommandAll* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3CommandAll& from);
  void MergeFrom(const M3CommandAll& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string name_cmd = 1;
  inline int name_cmd_size() const;
  inline void clear_name_cmd();
  static const int kNameCmdFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& name_cmd() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name_cmd();
  inline const ::std::string& name_cmd(int index) const;
  inline ::std::string* mutable_name_cmd(int index);
  inline void set_name_cmd(int index, const ::std::string& value);
  inline void set_name_cmd(int index, const char* value);
  inline void set_name_cmd(int index, const char* value, size_t size);
  inline ::std::string* add_name_cmd();
  inline void add_name_cmd(const ::std::string& value);
  inline void add_name_cmd(const char* value);
  inline void add_name_cmd(const char* value, size_t size);
  
  // repeated string name_param = 2;
  inline int name_param_size() const;
  inline void clear_name_param();
  static const int kNameParamFieldNumber = 2;
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& name_param() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name_param();
  inline const ::std::string& name_param(int index) const;
  inline ::std::string* mutable_name_param(int index);
  inline void set_name_param(int index, const ::std::string& value);
  inline void set_name_param(int index, const char* value);
  inline void set_name_param(int index, const char* value, size_t size);
  inline ::std::string* add_name_param();
  inline void add_name_param(const ::std::string& value);
  inline void add_name_param(const char* value);
  inline void add_name_param(const char* value, size_t size);
  
  // repeated bytes datum_cmd = 3;
  inline int datum_cmd_size() const;
  inline void clear_datum_cmd();
  static const int kDatumCmdFieldNumber = 3;
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& datum_cmd() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_datum_cmd();
  inline const ::std::string& datum_cmd(int index) const;
  inline ::std::string* mutable_datum_cmd(int index);
  inline void set_datum_cmd(int index, const ::std::string& value);
  inline void set_datum_cmd(int index, const char* value);
  inline void set_datum_cmd(int index, const void* value, size_t size);
  inline ::std::string* add_datum_cmd();
  inline void add_datum_cmd(const ::std::string& value);
  inline void add_datum_cmd(const char* value);
  inline void add_datum_cmd(const void* value, size_t size);
  
  // repeated bytes datum_param = 4;
  inline int datum_param_size() const;
  inline void clear_datum_param();
  static const int kDatumParamFieldNumber = 4;
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& datum_param() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_datum_param();
  inline const ::std::string& datum_param(int index) const;
  inline ::std::string* mutable_datum_param(int index);
  inline void set_datum_param(int index, const ::std::string& value);
  inline void set_datum_param(int index, const char* value);
  inline void set_datum_param(int index, const void* value, size_t size);
  inline ::std::string* add_datum_param();
  inline void add_datum_param(const ::std::string& value);
  inline void add_datum_param(const char* value);
  inline void add_datum_param(const void* value, size_t size);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> name_cmd_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_param_;
  ::google::protobuf::RepeatedPtrField< ::std::string> datum_cmd_;
  ::google::protobuf::RepeatedPtrField< ::std::string> datum_param_;
  friend void  protobuf_AddDesc_component_5fbase_2eproto();
  friend void protobuf_AssignDesc_component_5fbase_2eproto();
  friend void protobuf_ShutdownFile_component_5fbase_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static M3CommandAll* default_instance_;
};
// -------------------------------------------------------------------

class M3StatusLogPage : public ::google::protobuf::Message {
 public:
  M3StatusLogPage();
  virtual ~M3StatusLogPage();
  
  M3StatusLogPage(const M3StatusLogPage& from);
  
  inline M3StatusLogPage& operator=(const M3StatusLogPage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const M3StatusLogPage& default_instance();
  void Swap(M3StatusLogPage* other);
  
  // implements Message ----------------------------------------------
  
  M3StatusLogPage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3StatusLogPage& from);
  void MergeFrom(const M3StatusLogPage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .M3StatusAll entry = 1;
  inline int entry_size() const;
  inline void clear_entry();
  static const int kEntryFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::M3StatusAll >& entry() const;
  inline ::google::protobuf::RepeatedPtrField< ::M3StatusAll >* mutable_entry();
  inline const ::M3StatusAll& entry(int index) const;
  inline ::M3StatusAll* mutable_entry(int index);
  inline ::M3StatusAll* add_entry();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::M3StatusAll > entry_;
  friend void  protobuf_AddDesc_component_5fbase_2eproto();
  friend void protobuf_AssignDesc_component_5fbase_2eproto();
  friend void protobuf_ShutdownFile_component_5fbase_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static M3StatusLogPage* default_instance_;
};
// -------------------------------------------------------------------

class M3BaseStatus : public ::google::protobuf::Message {
 public:
  M3BaseStatus();
  virtual ~M3BaseStatus();
  
  M3BaseStatus(const M3BaseStatus& from);
  
  inline M3BaseStatus& operator=(const M3BaseStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const M3BaseStatus& default_instance();
  void Swap(M3BaseStatus* other);
  
  // implements Message ----------------------------------------------
  
  M3BaseStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3BaseStatus& from);
  void MergeFrom(const M3BaseStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional .M3COMP_STATE state = 2 [default = M3COMP_STATE_INIT];
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline M3COMP_STATE state() const;
  inline void set_state(M3COMP_STATE value);
  
  // optional int64 timestamp = 3;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);
  
  // optional string rate = 4 [default = "fast"];
  inline bool has_rate() const;
  inline void clear_rate();
  static const int kRateFieldNumber = 4;
  inline const ::std::string& rate() const;
  inline void set_rate(const ::std::string& value);
  inline void set_rate(const char* value);
  inline void set_rate(const char* value, size_t size);
  inline ::std::string* mutable_rate();
  
  // optional string version = 5;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 5;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* name_;
  static const ::std::string _default_name_;
  int state_;
  ::google::protobuf::int64 timestamp_;
  ::std::string* rate_;
  static const ::std::string _default_rate_;
  ::std::string* version_;
  static const ::std::string _default_version_;
  friend void  protobuf_AddDesc_component_5fbase_2eproto();
  friend void protobuf_AssignDesc_component_5fbase_2eproto();
  friend void protobuf_ShutdownFile_component_5fbase_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static M3BaseStatus* default_instance_;
};
// -------------------------------------------------------------------

class M3EtherCATStatus : public ::google::protobuf::Message {
 public:
  M3EtherCATStatus();
  virtual ~M3EtherCATStatus();
  
  M3EtherCATStatus(const M3EtherCATStatus& from);
  
  inline M3EtherCATStatus& operator=(const M3EtherCATStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const M3EtherCATStatus& default_instance();
  void Swap(M3EtherCATStatus* other);
  
  // implements Message ----------------------------------------------
  
  M3EtherCATStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3EtherCATStatus& from);
  void MergeFrom(const M3EtherCATStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 network_id = 1 [default = -1];
  inline bool has_network_id() const;
  inline void clear_network_id();
  static const int kNetworkIdFieldNumber = 1;
  inline ::google::protobuf::int32 network_id() const;
  inline void set_network_id(::google::protobuf::int32 value);
  
  // optional int32 serial_number = 2 [default = -1];
  inline bool has_serial_number() const;
  inline void clear_serial_number();
  static const int kSerialNumberFieldNumber = 2;
  inline ::google::protobuf::int32 serial_number() const;
  inline void set_serial_number(::google::protobuf::int32 value);
  
  // optional int32 product_code = 3 [default = -1];
  inline bool has_product_code() const;
  inline void clear_product_code();
  static const int kProductCodeFieldNumber = 3;
  inline ::google::protobuf::int32 product_code() const;
  inline void set_product_code(::google::protobuf::int32 value);
  
  // optional int32 active = 4;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 4;
  inline ::google::protobuf::int32 active() const;
  inline void set_active(::google::protobuf::int32 value);
  
  // optional int32 online = 5;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 5;
  inline ::google::protobuf::int32 online() const;
  inline void set_online(::google::protobuf::int32 value);
  
  // optional int32 operational = 6;
  inline bool has_operational() const;
  inline void clear_operational();
  static const int kOperationalFieldNumber = 6;
  inline ::google::protobuf::int32 operational() const;
  inline void set_operational(::google::protobuf::int32 value);
  
  // optional int32 al_state = 7;
  inline bool has_al_state() const;
  inline void clear_al_state();
  static const int kAlStateFieldNumber = 7;
  inline ::google::protobuf::int32 al_state() const;
  inline void set_al_state(::google::protobuf::int32 value);
  
  // optional string pdo_version = 20;
  inline bool has_pdo_version() const;
  inline void clear_pdo_version();
  static const int kPdoVersionFieldNumber = 20;
  inline const ::std::string& pdo_version() const;
  inline void set_pdo_version(const ::std::string& value);
  inline void set_pdo_version(const char* value);
  inline void set_pdo_version(const char* value, size_t size);
  inline ::std::string* mutable_pdo_version();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 network_id_;
  ::google::protobuf::int32 serial_number_;
  ::google::protobuf::int32 product_code_;
  ::google::protobuf::int32 active_;
  ::google::protobuf::int32 online_;
  ::google::protobuf::int32 operational_;
  ::google::protobuf::int32 al_state_;
  ::std::string* pdo_version_;
  static const ::std::string _default_pdo_version_;
  friend void  protobuf_AddDesc_component_5fbase_2eproto();
  friend void protobuf_AssignDesc_component_5fbase_2eproto();
  friend void protobuf_ShutdownFile_component_5fbase_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static M3EtherCATStatus* default_instance_;
};
// -------------------------------------------------------------------

class M3MonitorComponent : public ::google::protobuf::Message {
 public:
  M3MonitorComponent();
  virtual ~M3MonitorComponent();
  
  M3MonitorComponent(const M3MonitorComponent& from);
  
  inline M3MonitorComponent& operator=(const M3MonitorComponent& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const M3MonitorComponent& default_instance();
  void Swap(M3MonitorComponent* other);
  
  // implements Message ----------------------------------------------
  
  M3MonitorComponent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3MonitorComponent& from);
  void MergeFrom(const M3MonitorComponent& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional .M3COMP_STATE state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline M3COMP_STATE state() const;
  inline void set_state(M3COMP_STATE value);
  
  // optional double cycle_time_status_us = 3;
  inline bool has_cycle_time_status_us() const;
  inline void clear_cycle_time_status_us();
  static const int kCycleTimeStatusUsFieldNumber = 3;
  inline double cycle_time_status_us() const;
  inline void set_cycle_time_status_us(double value);
  
  // optional double cycle_time_command_us = 4;
  inline bool has_cycle_time_command_us() const;
  inline void clear_cycle_time_command_us();
  static const int kCycleTimeCommandUsFieldNumber = 4;
  inline double cycle_time_command_us() const;
  inline void set_cycle_time_command_us(double value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* name_;
  static const ::std::string _default_name_;
  int state_;
  double cycle_time_status_us_;
  double cycle_time_command_us_;
  friend void  protobuf_AddDesc_component_5fbase_2eproto();
  friend void protobuf_AssignDesc_component_5fbase_2eproto();
  friend void protobuf_ShutdownFile_component_5fbase_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static M3MonitorComponent* default_instance_;
};
// -------------------------------------------------------------------

class M3MonitorCommand : public ::google::protobuf::Message {
 public:
  M3MonitorCommand();
  virtual ~M3MonitorCommand();
  
  M3MonitorCommand(const M3MonitorCommand& from);
  
  inline M3MonitorCommand& operator=(const M3MonitorCommand& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const M3MonitorCommand& default_instance();
  void Swap(M3MonitorCommand* other);
  
  // implements Message ----------------------------------------------
  
  M3MonitorCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3MonitorCommand& from);
  void MergeFrom(const M3MonitorCommand& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  friend void  protobuf_AddDesc_component_5fbase_2eproto();
  friend void protobuf_AssignDesc_component_5fbase_2eproto();
  friend void protobuf_ShutdownFile_component_5fbase_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[1];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static M3MonitorCommand* default_instance_;
};
// -------------------------------------------------------------------

class M3MonitorParam : public ::google::protobuf::Message {
 public:
  M3MonitorParam();
  virtual ~M3MonitorParam();
  
  M3MonitorParam(const M3MonitorParam& from);
  
  inline M3MonitorParam& operator=(const M3MonitorParam& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const M3MonitorParam& default_instance();
  void Swap(M3MonitorParam* other);
  
  // implements Message ----------------------------------------------
  
  M3MonitorParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3MonitorParam& from);
  void MergeFrom(const M3MonitorParam& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  friend void  protobuf_AddDesc_component_5fbase_2eproto();
  friend void protobuf_AssignDesc_component_5fbase_2eproto();
  friend void protobuf_ShutdownFile_component_5fbase_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[1];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static M3MonitorParam* default_instance_;
};
// -------------------------------------------------------------------

class M3MonitorStatus : public ::google::protobuf::Message {
 public:
  M3MonitorStatus();
  virtual ~M3MonitorStatus();
  
  M3MonitorStatus(const M3MonitorStatus& from);
  
  inline M3MonitorStatus& operator=(const M3MonitorStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const M3MonitorStatus& default_instance();
  void Swap(M3MonitorStatus* other);
  
  // implements Message ----------------------------------------------
  
  M3MonitorStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3MonitorStatus& from);
  void MergeFrom(const M3MonitorStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .M3BaseStatus base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::M3BaseStatus& base() const;
  inline ::M3BaseStatus* mutable_base();
  
  // optional int32 num_components_rt = 2;
  inline bool has_num_components_rt() const;
  inline void clear_num_components_rt();
  static const int kNumComponentsRtFieldNumber = 2;
  inline ::google::protobuf::int32 num_components_rt() const;
  inline void set_num_components_rt(::google::protobuf::int32 value);
  
  // optional int32 num_components_ec = 3;
  inline bool has_num_components_ec() const;
  inline void clear_num_components_ec();
  static const int kNumComponentsEcFieldNumber = 3;
  inline ::google::protobuf::int32 num_components_ec() const;
  inline void set_num_components_ec(::google::protobuf::int32 value);
  
  // optional int32 num_components = 4;
  inline bool has_num_components() const;
  inline void clear_num_components();
  static const int kNumComponentsFieldNumber = 4;
  inline ::google::protobuf::int32 num_components() const;
  inline void set_num_components(::google::protobuf::int32 value);
  
  // optional int32 num_components_safeop = 5;
  inline bool has_num_components_safeop() const;
  inline void clear_num_components_safeop();
  static const int kNumComponentsSafeopFieldNumber = 5;
  inline ::google::protobuf::int32 num_components_safeop() const;
  inline void set_num_components_safeop(::google::protobuf::int32 value);
  
  // optional int32 num_components_op = 6;
  inline bool has_num_components_op() const;
  inline void clear_num_components_op();
  static const int kNumComponentsOpFieldNumber = 6;
  inline ::google::protobuf::int32 num_components_op() const;
  inline void set_num_components_op(::google::protobuf::int32 value);
  
  // optional int32 num_components_err = 7;
  inline bool has_num_components_err() const;
  inline void clear_num_components_err();
  static const int kNumComponentsErrFieldNumber = 7;
  inline ::google::protobuf::int32 num_components_err() const;
  inline void set_num_components_err(::google::protobuf::int32 value);
  
  // optional bool operational = 8;
  inline bool has_operational() const;
  inline void clear_operational();
  static const int kOperationalFieldNumber = 8;
  inline bool operational() const;
  inline void set_operational(bool value);
  
  // optional double cycle_time_status_us = 9;
  inline bool has_cycle_time_status_us() const;
  inline void clear_cycle_time_status_us();
  static const int kCycleTimeStatusUsFieldNumber = 9;
  inline double cycle_time_status_us() const;
  inline void set_cycle_time_status_us(double value);
  
  // optional double cycle_time_command_us = 10;
  inline bool has_cycle_time_command_us() const;
  inline void clear_cycle_time_command_us();
  static const int kCycleTimeCommandUsFieldNumber = 10;
  inline double cycle_time_command_us() const;
  inline void set_cycle_time_command_us(double value);
  
  // optional double cycle_time_us = 11;
  inline bool has_cycle_time_us() const;
  inline void clear_cycle_time_us();
  static const int kCycleTimeUsFieldNumber = 11;
  inline double cycle_time_us() const;
  inline void set_cycle_time_us(double value);
  
  // optional double cycle_frequency_hz = 12;
  inline bool has_cycle_frequency_hz() const;
  inline void clear_cycle_frequency_hz();
  static const int kCycleFrequencyHzFieldNumber = 12;
  inline double cycle_frequency_hz() const;
  inline void set_cycle_frequency_hz(double value);
  
  // repeated .M3MonitorComponent components = 13;
  inline int components_size() const;
  inline void clear_components();
  static const int kComponentsFieldNumber = 13;
  inline const ::google::protobuf::RepeatedPtrField< ::M3MonitorComponent >& components() const;
  inline ::google::protobuf::RepeatedPtrField< ::M3MonitorComponent >* mutable_components();
  inline const ::M3MonitorComponent& components(int index) const;
  inline ::M3MonitorComponent* mutable_components(int index);
  inline ::M3MonitorComponent* add_components();
  
  // optional int32 num_ethercat_cycles = 14;
  inline bool has_num_ethercat_cycles() const;
  inline void clear_num_ethercat_cycles();
  static const int kNumEthercatCyclesFieldNumber = 14;
  inline ::google::protobuf::int32 num_ethercat_cycles() const;
  inline void set_num_ethercat_cycles(::google::protobuf::int32 value);
  
  // optional double cycle_time_max_us = 15;
  inline bool has_cycle_time_max_us() const;
  inline void clear_cycle_time_max_us();
  static const int kCycleTimeMaxUsFieldNumber = 15;
  inline double cycle_time_max_us() const;
  inline void set_cycle_time_max_us(double value);
  
  // repeated .M3MonitorEcDomain ec_domains = 16;
  inline int ec_domains_size() const;
  inline void clear_ec_domains();
  static const int kEcDomainsFieldNumber = 16;
  inline const ::google::protobuf::RepeatedPtrField< ::M3MonitorEcDomain >& ec_domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::M3MonitorEcDomain >* mutable_ec_domains();
  inline const ::M3MonitorEcDomain& ec_domains(int index) const;
  inline ::M3MonitorEcDomain* mutable_ec_domains(int index);
  inline ::M3MonitorEcDomain* add_ec_domains();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::M3BaseStatus* base_;
  ::google::protobuf::int32 num_components_rt_;
  ::google::protobuf::int32 num_components_ec_;
  ::google::protobuf::int32 num_components_;
  ::google::protobuf::int32 num_components_safeop_;
  ::google::protobuf::int32 num_components_op_;
  ::google::protobuf::int32 num_components_err_;
  bool operational_;
  double cycle_time_status_us_;
  double cycle_time_command_us_;
  double cycle_time_us_;
  double cycle_frequency_hz_;
  ::google::protobuf::RepeatedPtrField< ::M3MonitorComponent > components_;
  ::google::protobuf::int32 num_ethercat_cycles_;
  double cycle_time_max_us_;
  ::google::protobuf::RepeatedPtrField< ::M3MonitorEcDomain > ec_domains_;
  friend void  protobuf_AddDesc_component_5fbase_2eproto();
  friend void protobuf_AssignDesc_component_5fbase_2eproto();
  friend void protobuf_ShutdownFile_component_5fbase_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static M3MonitorStatus* default_instance_;
};
// -------------------------------------------------------------------

class M3MonitorEcDomain : public ::google::protobuf::Message {
 public:
  M3MonitorEcDomain();
  virtual ~M3MonitorEcDomain();
  
  M3MonitorEcDomain(const M3MonitorEcDomain& from);
  
  inline M3MonitorEcDomain& operator=(const M3MonitorEcDomain& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const M3MonitorEcDomain& default_instance();
  void Swap(M3MonitorEcDomain* other);
  
  // implements Message ----------------------------------------------
  
  M3MonitorEcDomain* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3MonitorEcDomain& from);
  void MergeFrom(const M3MonitorEcDomain& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 t_ecat_wait_rx = 1;
  inline bool has_t_ecat_wait_rx() const;
  inline void clear_t_ecat_wait_rx();
  static const int kTEcatWaitRxFieldNumber = 1;
  inline ::google::protobuf::int64 t_ecat_wait_rx() const;
  inline void set_t_ecat_wait_rx(::google::protobuf::int64 value);
  
  // optional int64 t_ecat_rx = 2;
  inline bool has_t_ecat_rx() const;
  inline void clear_t_ecat_rx();
  static const int kTEcatRxFieldNumber = 2;
  inline ::google::protobuf::int64 t_ecat_rx() const;
  inline void set_t_ecat_rx(::google::protobuf::int64 value);
  
  // optional int64 t_ecat_wait_shm = 3;
  inline bool has_t_ecat_wait_shm() const;
  inline void clear_t_ecat_wait_shm();
  static const int kTEcatWaitShmFieldNumber = 3;
  inline ::google::protobuf::int64 t_ecat_wait_shm() const;
  inline void set_t_ecat_wait_shm(::google::protobuf::int64 value);
  
  // optional int64 t_ecat_shm = 4;
  inline bool has_t_ecat_shm() const;
  inline void clear_t_ecat_shm();
  static const int kTEcatShmFieldNumber = 4;
  inline ::google::protobuf::int64 t_ecat_shm() const;
  inline void set_t_ecat_shm(::google::protobuf::int64 value);
  
  // optional int64 t_ecat_wait_tx = 5;
  inline bool has_t_ecat_wait_tx() const;
  inline void clear_t_ecat_wait_tx();
  static const int kTEcatWaitTxFieldNumber = 5;
  inline ::google::protobuf::int64 t_ecat_wait_tx() const;
  inline void set_t_ecat_wait_tx(::google::protobuf::int64 value);
  
  // optional int64 t_ecat_tx = 6;
  inline bool has_t_ecat_tx() const;
  inline void clear_t_ecat_tx();
  static const int kTEcatTxFieldNumber = 6;
  inline ::google::protobuf::int64 t_ecat_tx() const;
  inline void set_t_ecat_tx(::google::protobuf::int64 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 t_ecat_wait_rx_;
  ::google::protobuf::int64 t_ecat_rx_;
  ::google::protobuf::int64 t_ecat_wait_shm_;
  ::google::protobuf::int64 t_ecat_shm_;
  ::google::protobuf::int64 t_ecat_wait_tx_;
  ::google::protobuf::int64 t_ecat_tx_;
  friend void  protobuf_AddDesc_component_5fbase_2eproto();
  friend void protobuf_AssignDesc_component_5fbase_2eproto();
  friend void protobuf_ShutdownFile_component_5fbase_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static M3MonitorEcDomain* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// M3StatusAll

// repeated string name = 1;
inline int M3StatusAll::name_size() const {
  return name_.size();
}
inline void M3StatusAll::clear_name() {
  name_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
M3StatusAll::name() const {
  return name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
M3StatusAll::mutable_name() {
  return &name_;
}
inline const ::std::string& M3StatusAll::name(int index) const {
  return name_.Get(index);
}
inline ::std::string* M3StatusAll::mutable_name(int index) {
  return name_.Mutable(index);
}
inline void M3StatusAll::set_name(int index, const ::std::string& value) {
  name_.Mutable(index)->assign(value);
}
inline void M3StatusAll::set_name(int index, const char* value) {
  name_.Mutable(index)->assign(value);
}
inline void M3StatusAll::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* M3StatusAll::add_name() {
  return name_.Add();
}
inline void M3StatusAll::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
}
inline void M3StatusAll::add_name(const char* value) {
  name_.Add()->assign(value);
}
inline void M3StatusAll::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}

// repeated bytes datum = 2;
inline int M3StatusAll::datum_size() const {
  return datum_.size();
}
inline void M3StatusAll::clear_datum() {
  datum_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
M3StatusAll::datum() const {
  return datum_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
M3StatusAll::mutable_datum() {
  return &datum_;
}
inline const ::std::string& M3StatusAll::datum(int index) const {
  return datum_.Get(index);
}
inline ::std::string* M3StatusAll::mutable_datum(int index) {
  return datum_.Mutable(index);
}
inline void M3StatusAll::set_datum(int index, const ::std::string& value) {
  datum_.Mutable(index)->assign(value);
}
inline void M3StatusAll::set_datum(int index, const char* value) {
  datum_.Mutable(index)->assign(value);
}
inline void M3StatusAll::set_datum(int index, const void* value, size_t size) {
  datum_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* M3StatusAll::add_datum() {
  return datum_.Add();
}
inline void M3StatusAll::add_datum(const ::std::string& value) {
  datum_.Add()->assign(value);
}
inline void M3StatusAll::add_datum(const char* value) {
  datum_.Add()->assign(value);
}
inline void M3StatusAll::add_datum(const void* value, size_t size) {
  datum_.Add()->assign(reinterpret_cast<const char*>(value), size);
}

// -------------------------------------------------------------------

// M3CommandAll

// repeated string name_cmd = 1;
inline int M3CommandAll::name_cmd_size() const {
  return name_cmd_.size();
}
inline void M3CommandAll::clear_name_cmd() {
  name_cmd_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
M3CommandAll::name_cmd() const {
  return name_cmd_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
M3CommandAll::mutable_name_cmd() {
  return &name_cmd_;
}
inline const ::std::string& M3CommandAll::name_cmd(int index) const {
  return name_cmd_.Get(index);
}
inline ::std::string* M3CommandAll::mutable_name_cmd(int index) {
  return name_cmd_.Mutable(index);
}
inline void M3CommandAll::set_name_cmd(int index, const ::std::string& value) {
  name_cmd_.Mutable(index)->assign(value);
}
inline void M3CommandAll::set_name_cmd(int index, const char* value) {
  name_cmd_.Mutable(index)->assign(value);
}
inline void M3CommandAll::set_name_cmd(int index, const char* value, size_t size) {
  name_cmd_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* M3CommandAll::add_name_cmd() {
  return name_cmd_.Add();
}
inline void M3CommandAll::add_name_cmd(const ::std::string& value) {
  name_cmd_.Add()->assign(value);
}
inline void M3CommandAll::add_name_cmd(const char* value) {
  name_cmd_.Add()->assign(value);
}
inline void M3CommandAll::add_name_cmd(const char* value, size_t size) {
  name_cmd_.Add()->assign(reinterpret_cast<const char*>(value), size);
}

// repeated string name_param = 2;
inline int M3CommandAll::name_param_size() const {
  return name_param_.size();
}
inline void M3CommandAll::clear_name_param() {
  name_param_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
M3CommandAll::name_param() const {
  return name_param_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
M3CommandAll::mutable_name_param() {
  return &name_param_;
}
inline const ::std::string& M3CommandAll::name_param(int index) const {
  return name_param_.Get(index);
}
inline ::std::string* M3CommandAll::mutable_name_param(int index) {
  return name_param_.Mutable(index);
}
inline void M3CommandAll::set_name_param(int index, const ::std::string& value) {
  name_param_.Mutable(index)->assign(value);
}
inline void M3CommandAll::set_name_param(int index, const char* value) {
  name_param_.Mutable(index)->assign(value);
}
inline void M3CommandAll::set_name_param(int index, const char* value, size_t size) {
  name_param_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* M3CommandAll::add_name_param() {
  return name_param_.Add();
}
inline void M3CommandAll::add_name_param(const ::std::string& value) {
  name_param_.Add()->assign(value);
}
inline void M3CommandAll::add_name_param(const char* value) {
  name_param_.Add()->assign(value);
}
inline void M3CommandAll::add_name_param(const char* value, size_t size) {
  name_param_.Add()->assign(reinterpret_cast<const char*>(value), size);
}

// repeated bytes datum_cmd = 3;
inline int M3CommandAll::datum_cmd_size() const {
  return datum_cmd_.size();
}
inline void M3CommandAll::clear_datum_cmd() {
  datum_cmd_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
M3CommandAll::datum_cmd() const {
  return datum_cmd_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
M3CommandAll::mutable_datum_cmd() {
  return &datum_cmd_;
}
inline const ::std::string& M3CommandAll::datum_cmd(int index) const {
  return datum_cmd_.Get(index);
}
inline ::std::string* M3CommandAll::mutable_datum_cmd(int index) {
  return datum_cmd_.Mutable(index);
}
inline void M3CommandAll::set_datum_cmd(int index, const ::std::string& value) {
  datum_cmd_.Mutable(index)->assign(value);
}
inline void M3CommandAll::set_datum_cmd(int index, const char* value) {
  datum_cmd_.Mutable(index)->assign(value);
}
inline void M3CommandAll::set_datum_cmd(int index, const void* value, size_t size) {
  datum_cmd_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* M3CommandAll::add_datum_cmd() {
  return datum_cmd_.Add();
}
inline void M3CommandAll::add_datum_cmd(const ::std::string& value) {
  datum_cmd_.Add()->assign(value);
}
inline void M3CommandAll::add_datum_cmd(const char* value) {
  datum_cmd_.Add()->assign(value);
}
inline void M3CommandAll::add_datum_cmd(const void* value, size_t size) {
  datum_cmd_.Add()->assign(reinterpret_cast<const char*>(value), size);
}

// repeated bytes datum_param = 4;
inline int M3CommandAll::datum_param_size() const {
  return datum_param_.size();
}
inline void M3CommandAll::clear_datum_param() {
  datum_param_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
M3CommandAll::datum_param() const {
  return datum_param_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
M3CommandAll::mutable_datum_param() {
  return &datum_param_;
}
inline const ::std::string& M3CommandAll::datum_param(int index) const {
  return datum_param_.Get(index);
}
inline ::std::string* M3CommandAll::mutable_datum_param(int index) {
  return datum_param_.Mutable(index);
}
inline void M3CommandAll::set_datum_param(int index, const ::std::string& value) {
  datum_param_.Mutable(index)->assign(value);
}
inline void M3CommandAll::set_datum_param(int index, const char* value) {
  datum_param_.Mutable(index)->assign(value);
}
inline void M3CommandAll::set_datum_param(int index, const void* value, size_t size) {
  datum_param_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* M3CommandAll::add_datum_param() {
  return datum_param_.Add();
}
inline void M3CommandAll::add_datum_param(const ::std::string& value) {
  datum_param_.Add()->assign(value);
}
inline void M3CommandAll::add_datum_param(const char* value) {
  datum_param_.Add()->assign(value);
}
inline void M3CommandAll::add_datum_param(const void* value, size_t size) {
  datum_param_.Add()->assign(reinterpret_cast<const char*>(value), size);
}

// -------------------------------------------------------------------

// M3StatusLogPage

// repeated .M3StatusAll entry = 1;
inline int M3StatusLogPage::entry_size() const {
  return entry_.size();
}
inline void M3StatusLogPage::clear_entry() {
  entry_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::M3StatusAll >&
M3StatusLogPage::entry() const {
  return entry_;
}
inline ::google::protobuf::RepeatedPtrField< ::M3StatusAll >*
M3StatusLogPage::mutable_entry() {
  return &entry_;
}
inline const ::M3StatusAll& M3StatusLogPage::entry(int index) const {
  return entry_.Get(index);
}
inline ::M3StatusAll* M3StatusLogPage::mutable_entry(int index) {
  return entry_.Mutable(index);
}
inline ::M3StatusAll* M3StatusLogPage::add_entry() {
  return entry_.Add();
}

// -------------------------------------------------------------------

// M3BaseStatus

// optional string name = 1;
inline bool M3BaseStatus::has_name() const {
  return _has_bit(0);
}
inline void M3BaseStatus::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& M3BaseStatus::name() const {
  return *name_;
}
inline void M3BaseStatus::set_name(const ::std::string& value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void M3BaseStatus::set_name(const char* value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void M3BaseStatus::set_name(const char* value, size_t size) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* M3BaseStatus::mutable_name() {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional .M3COMP_STATE state = 2 [default = M3COMP_STATE_INIT];
inline bool M3BaseStatus::has_state() const {
  return _has_bit(1);
}
inline void M3BaseStatus::clear_state() {
  state_ = 0;
  _clear_bit(1);
}
inline M3COMP_STATE M3BaseStatus::state() const {
  return static_cast< M3COMP_STATE >(state_);
}
inline void M3BaseStatus::set_state(M3COMP_STATE value) {
  GOOGLE_DCHECK(M3COMP_STATE_IsValid(value));
  _set_bit(1);
  state_ = value;
}

// optional int64 timestamp = 3;
inline bool M3BaseStatus::has_timestamp() const {
  return _has_bit(2);
}
inline void M3BaseStatus::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::int64 M3BaseStatus::timestamp() const {
  return timestamp_;
}
inline void M3BaseStatus::set_timestamp(::google::protobuf::int64 value) {
  _set_bit(2);
  timestamp_ = value;
}

// optional string rate = 4 [default = "fast"];
inline bool M3BaseStatus::has_rate() const {
  return _has_bit(3);
}
inline void M3BaseStatus::clear_rate() {
  if (rate_ != &_default_rate_) {
    rate_->assign(_default_rate_);
  }
  _clear_bit(3);
}
inline const ::std::string& M3BaseStatus::rate() const {
  return *rate_;
}
inline void M3BaseStatus::set_rate(const ::std::string& value) {
  _set_bit(3);
  if (rate_ == &_default_rate_) {
    rate_ = new ::std::string;
  }
  rate_->assign(value);
}
inline void M3BaseStatus::set_rate(const char* value) {
  _set_bit(3);
  if (rate_ == &_default_rate_) {
    rate_ = new ::std::string;
  }
  rate_->assign(value);
}
inline void M3BaseStatus::set_rate(const char* value, size_t size) {
  _set_bit(3);
  if (rate_ == &_default_rate_) {
    rate_ = new ::std::string;
  }
  rate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* M3BaseStatus::mutable_rate() {
  _set_bit(3);
  if (rate_ == &_default_rate_) {
    rate_ = new ::std::string(_default_rate_);
  }
  return rate_;
}

// optional string version = 5;
inline bool M3BaseStatus::has_version() const {
  return _has_bit(4);
}
inline void M3BaseStatus::clear_version() {
  if (version_ != &_default_version_) {
    version_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& M3BaseStatus::version() const {
  return *version_;
}
inline void M3BaseStatus::set_version(const ::std::string& value) {
  _set_bit(4);
  if (version_ == &_default_version_) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void M3BaseStatus::set_version(const char* value) {
  _set_bit(4);
  if (version_ == &_default_version_) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void M3BaseStatus::set_version(const char* value, size_t size) {
  _set_bit(4);
  if (version_ == &_default_version_) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* M3BaseStatus::mutable_version() {
  _set_bit(4);
  if (version_ == &_default_version_) {
    version_ = new ::std::string;
  }
  return version_;
}

// -------------------------------------------------------------------

// M3EtherCATStatus

// optional int32 network_id = 1 [default = -1];
inline bool M3EtherCATStatus::has_network_id() const {
  return _has_bit(0);
}
inline void M3EtherCATStatus::clear_network_id() {
  network_id_ = -1;
  _clear_bit(0);
}
inline ::google::protobuf::int32 M3EtherCATStatus::network_id() const {
  return network_id_;
}
inline void M3EtherCATStatus::set_network_id(::google::protobuf::int32 value) {
  _set_bit(0);
  network_id_ = value;
}

// optional int32 serial_number = 2 [default = -1];
inline bool M3EtherCATStatus::has_serial_number() const {
  return _has_bit(1);
}
inline void M3EtherCATStatus::clear_serial_number() {
  serial_number_ = -1;
  _clear_bit(1);
}
inline ::google::protobuf::int32 M3EtherCATStatus::serial_number() const {
  return serial_number_;
}
inline void M3EtherCATStatus::set_serial_number(::google::protobuf::int32 value) {
  _set_bit(1);
  serial_number_ = value;
}

// optional int32 product_code = 3 [default = -1];
inline bool M3EtherCATStatus::has_product_code() const {
  return _has_bit(2);
}
inline void M3EtherCATStatus::clear_product_code() {
  product_code_ = -1;
  _clear_bit(2);
}
inline ::google::protobuf::int32 M3EtherCATStatus::product_code() const {
  return product_code_;
}
inline void M3EtherCATStatus::set_product_code(::google::protobuf::int32 value) {
  _set_bit(2);
  product_code_ = value;
}

// optional int32 active = 4;
inline bool M3EtherCATStatus::has_active() const {
  return _has_bit(3);
}
inline void M3EtherCATStatus::clear_active() {
  active_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 M3EtherCATStatus::active() const {
  return active_;
}
inline void M3EtherCATStatus::set_active(::google::protobuf::int32 value) {
  _set_bit(3);
  active_ = value;
}

// optional int32 online = 5;
inline bool M3EtherCATStatus::has_online() const {
  return _has_bit(4);
}
inline void M3EtherCATStatus::clear_online() {
  online_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 M3EtherCATStatus::online() const {
  return online_;
}
inline void M3EtherCATStatus::set_online(::google::protobuf::int32 value) {
  _set_bit(4);
  online_ = value;
}

// optional int32 operational = 6;
inline bool M3EtherCATStatus::has_operational() const {
  return _has_bit(5);
}
inline void M3EtherCATStatus::clear_operational() {
  operational_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 M3EtherCATStatus::operational() const {
  return operational_;
}
inline void M3EtherCATStatus::set_operational(::google::protobuf::int32 value) {
  _set_bit(5);
  operational_ = value;
}

// optional int32 al_state = 7;
inline bool M3EtherCATStatus::has_al_state() const {
  return _has_bit(6);
}
inline void M3EtherCATStatus::clear_al_state() {
  al_state_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 M3EtherCATStatus::al_state() const {
  return al_state_;
}
inline void M3EtherCATStatus::set_al_state(::google::protobuf::int32 value) {
  _set_bit(6);
  al_state_ = value;
}

// optional string pdo_version = 20;
inline bool M3EtherCATStatus::has_pdo_version() const {
  return _has_bit(7);
}
inline void M3EtherCATStatus::clear_pdo_version() {
  if (pdo_version_ != &_default_pdo_version_) {
    pdo_version_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& M3EtherCATStatus::pdo_version() const {
  return *pdo_version_;
}
inline void M3EtherCATStatus::set_pdo_version(const ::std::string& value) {
  _set_bit(7);
  if (pdo_version_ == &_default_pdo_version_) {
    pdo_version_ = new ::std::string;
  }
  pdo_version_->assign(value);
}
inline void M3EtherCATStatus::set_pdo_version(const char* value) {
  _set_bit(7);
  if (pdo_version_ == &_default_pdo_version_) {
    pdo_version_ = new ::std::string;
  }
  pdo_version_->assign(value);
}
inline void M3EtherCATStatus::set_pdo_version(const char* value, size_t size) {
  _set_bit(7);
  if (pdo_version_ == &_default_pdo_version_) {
    pdo_version_ = new ::std::string;
  }
  pdo_version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* M3EtherCATStatus::mutable_pdo_version() {
  _set_bit(7);
  if (pdo_version_ == &_default_pdo_version_) {
    pdo_version_ = new ::std::string;
  }
  return pdo_version_;
}

// -------------------------------------------------------------------

// M3MonitorComponent

// optional string name = 1;
inline bool M3MonitorComponent::has_name() const {
  return _has_bit(0);
}
inline void M3MonitorComponent::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& M3MonitorComponent::name() const {
  return *name_;
}
inline void M3MonitorComponent::set_name(const ::std::string& value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void M3MonitorComponent::set_name(const char* value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void M3MonitorComponent::set_name(const char* value, size_t size) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* M3MonitorComponent::mutable_name() {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional .M3COMP_STATE state = 2;
inline bool M3MonitorComponent::has_state() const {
  return _has_bit(1);
}
inline void M3MonitorComponent::clear_state() {
  state_ = 0;
  _clear_bit(1);
}
inline M3COMP_STATE M3MonitorComponent::state() const {
  return static_cast< M3COMP_STATE >(state_);
}
inline void M3MonitorComponent::set_state(M3COMP_STATE value) {
  GOOGLE_DCHECK(M3COMP_STATE_IsValid(value));
  _set_bit(1);
  state_ = value;
}

// optional double cycle_time_status_us = 3;
inline bool M3MonitorComponent::has_cycle_time_status_us() const {
  return _has_bit(2);
}
inline void M3MonitorComponent::clear_cycle_time_status_us() {
  cycle_time_status_us_ = 0;
  _clear_bit(2);
}
inline double M3MonitorComponent::cycle_time_status_us() const {
  return cycle_time_status_us_;
}
inline void M3MonitorComponent::set_cycle_time_status_us(double value) {
  _set_bit(2);
  cycle_time_status_us_ = value;
}

// optional double cycle_time_command_us = 4;
inline bool M3MonitorComponent::has_cycle_time_command_us() const {
  return _has_bit(3);
}
inline void M3MonitorComponent::clear_cycle_time_command_us() {
  cycle_time_command_us_ = 0;
  _clear_bit(3);
}
inline double M3MonitorComponent::cycle_time_command_us() const {
  return cycle_time_command_us_;
}
inline void M3MonitorComponent::set_cycle_time_command_us(double value) {
  _set_bit(3);
  cycle_time_command_us_ = value;
}

// -------------------------------------------------------------------

// M3MonitorCommand

// -------------------------------------------------------------------

// M3MonitorParam

// -------------------------------------------------------------------

// M3MonitorStatus

// optional .M3BaseStatus base = 1;
inline bool M3MonitorStatus::has_base() const {
  return _has_bit(0);
}
inline void M3MonitorStatus::clear_base() {
  if (base_ != NULL) base_->::M3BaseStatus::Clear();
  _clear_bit(0);
}
inline const ::M3BaseStatus& M3MonitorStatus::base() const {
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::M3BaseStatus* M3MonitorStatus::mutable_base() {
  _set_bit(0);
  if (base_ == NULL) base_ = new ::M3BaseStatus;
  return base_;
}

// optional int32 num_components_rt = 2;
inline bool M3MonitorStatus::has_num_components_rt() const {
  return _has_bit(1);
}
inline void M3MonitorStatus::clear_num_components_rt() {
  num_components_rt_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 M3MonitorStatus::num_components_rt() const {
  return num_components_rt_;
}
inline void M3MonitorStatus::set_num_components_rt(::google::protobuf::int32 value) {
  _set_bit(1);
  num_components_rt_ = value;
}

// optional int32 num_components_ec = 3;
inline bool M3MonitorStatus::has_num_components_ec() const {
  return _has_bit(2);
}
inline void M3MonitorStatus::clear_num_components_ec() {
  num_components_ec_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 M3MonitorStatus::num_components_ec() const {
  return num_components_ec_;
}
inline void M3MonitorStatus::set_num_components_ec(::google::protobuf::int32 value) {
  _set_bit(2);
  num_components_ec_ = value;
}

// optional int32 num_components = 4;
inline bool M3MonitorStatus::has_num_components() const {
  return _has_bit(3);
}
inline void M3MonitorStatus::clear_num_components() {
  num_components_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 M3MonitorStatus::num_components() const {
  return num_components_;
}
inline void M3MonitorStatus::set_num_components(::google::protobuf::int32 value) {
  _set_bit(3);
  num_components_ = value;
}

// optional int32 num_components_safeop = 5;
inline bool M3MonitorStatus::has_num_components_safeop() const {
  return _has_bit(4);
}
inline void M3MonitorStatus::clear_num_components_safeop() {
  num_components_safeop_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 M3MonitorStatus::num_components_safeop() const {
  return num_components_safeop_;
}
inline void M3MonitorStatus::set_num_components_safeop(::google::protobuf::int32 value) {
  _set_bit(4);
  num_components_safeop_ = value;
}

// optional int32 num_components_op = 6;
inline bool M3MonitorStatus::has_num_components_op() const {
  return _has_bit(5);
}
inline void M3MonitorStatus::clear_num_components_op() {
  num_components_op_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 M3MonitorStatus::num_components_op() const {
  return num_components_op_;
}
inline void M3MonitorStatus::set_num_components_op(::google::protobuf::int32 value) {
  _set_bit(5);
  num_components_op_ = value;
}

// optional int32 num_components_err = 7;
inline bool M3MonitorStatus::has_num_components_err() const {
  return _has_bit(6);
}
inline void M3MonitorStatus::clear_num_components_err() {
  num_components_err_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 M3MonitorStatus::num_components_err() const {
  return num_components_err_;
}
inline void M3MonitorStatus::set_num_components_err(::google::protobuf::int32 value) {
  _set_bit(6);
  num_components_err_ = value;
}

// optional bool operational = 8;
inline bool M3MonitorStatus::has_operational() const {
  return _has_bit(7);
}
inline void M3MonitorStatus::clear_operational() {
  operational_ = false;
  _clear_bit(7);
}
inline bool M3MonitorStatus::operational() const {
  return operational_;
}
inline void M3MonitorStatus::set_operational(bool value) {
  _set_bit(7);
  operational_ = value;
}

// optional double cycle_time_status_us = 9;
inline bool M3MonitorStatus::has_cycle_time_status_us() const {
  return _has_bit(8);
}
inline void M3MonitorStatus::clear_cycle_time_status_us() {
  cycle_time_status_us_ = 0;
  _clear_bit(8);
}
inline double M3MonitorStatus::cycle_time_status_us() const {
  return cycle_time_status_us_;
}
inline void M3MonitorStatus::set_cycle_time_status_us(double value) {
  _set_bit(8);
  cycle_time_status_us_ = value;
}

// optional double cycle_time_command_us = 10;
inline bool M3MonitorStatus::has_cycle_time_command_us() const {
  return _has_bit(9);
}
inline void M3MonitorStatus::clear_cycle_time_command_us() {
  cycle_time_command_us_ = 0;
  _clear_bit(9);
}
inline double M3MonitorStatus::cycle_time_command_us() const {
  return cycle_time_command_us_;
}
inline void M3MonitorStatus::set_cycle_time_command_us(double value) {
  _set_bit(9);
  cycle_time_command_us_ = value;
}

// optional double cycle_time_us = 11;
inline bool M3MonitorStatus::has_cycle_time_us() const {
  return _has_bit(10);
}
inline void M3MonitorStatus::clear_cycle_time_us() {
  cycle_time_us_ = 0;
  _clear_bit(10);
}
inline double M3MonitorStatus::cycle_time_us() const {
  return cycle_time_us_;
}
inline void M3MonitorStatus::set_cycle_time_us(double value) {
  _set_bit(10);
  cycle_time_us_ = value;
}

// optional double cycle_frequency_hz = 12;
inline bool M3MonitorStatus::has_cycle_frequency_hz() const {
  return _has_bit(11);
}
inline void M3MonitorStatus::clear_cycle_frequency_hz() {
  cycle_frequency_hz_ = 0;
  _clear_bit(11);
}
inline double M3MonitorStatus::cycle_frequency_hz() const {
  return cycle_frequency_hz_;
}
inline void M3MonitorStatus::set_cycle_frequency_hz(double value) {
  _set_bit(11);
  cycle_frequency_hz_ = value;
}

// repeated .M3MonitorComponent components = 13;
inline int M3MonitorStatus::components_size() const {
  return components_.size();
}
inline void M3MonitorStatus::clear_components() {
  components_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::M3MonitorComponent >&
M3MonitorStatus::components() const {
  return components_;
}
inline ::google::protobuf::RepeatedPtrField< ::M3MonitorComponent >*
M3MonitorStatus::mutable_components() {
  return &components_;
}
inline const ::M3MonitorComponent& M3MonitorStatus::components(int index) const {
  return components_.Get(index);
}
inline ::M3MonitorComponent* M3MonitorStatus::mutable_components(int index) {
  return components_.Mutable(index);
}
inline ::M3MonitorComponent* M3MonitorStatus::add_components() {
  return components_.Add();
}

// optional int32 num_ethercat_cycles = 14;
inline bool M3MonitorStatus::has_num_ethercat_cycles() const {
  return _has_bit(13);
}
inline void M3MonitorStatus::clear_num_ethercat_cycles() {
  num_ethercat_cycles_ = 0;
  _clear_bit(13);
}
inline ::google::protobuf::int32 M3MonitorStatus::num_ethercat_cycles() const {
  return num_ethercat_cycles_;
}
inline void M3MonitorStatus::set_num_ethercat_cycles(::google::protobuf::int32 value) {
  _set_bit(13);
  num_ethercat_cycles_ = value;
}

// optional double cycle_time_max_us = 15;
inline bool M3MonitorStatus::has_cycle_time_max_us() const {
  return _has_bit(14);
}
inline void M3MonitorStatus::clear_cycle_time_max_us() {
  cycle_time_max_us_ = 0;
  _clear_bit(14);
}
inline double M3MonitorStatus::cycle_time_max_us() const {
  return cycle_time_max_us_;
}
inline void M3MonitorStatus::set_cycle_time_max_us(double value) {
  _set_bit(14);
  cycle_time_max_us_ = value;
}

// repeated .M3MonitorEcDomain ec_domains = 16;
inline int M3MonitorStatus::ec_domains_size() const {
  return ec_domains_.size();
}
inline void M3MonitorStatus::clear_ec_domains() {
  ec_domains_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::M3MonitorEcDomain >&
M3MonitorStatus::ec_domains() const {
  return ec_domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::M3MonitorEcDomain >*
M3MonitorStatus::mutable_ec_domains() {
  return &ec_domains_;
}
inline const ::M3MonitorEcDomain& M3MonitorStatus::ec_domains(int index) const {
  return ec_domains_.Get(index);
}
inline ::M3MonitorEcDomain* M3MonitorStatus::mutable_ec_domains(int index) {
  return ec_domains_.Mutable(index);
}
inline ::M3MonitorEcDomain* M3MonitorStatus::add_ec_domains() {
  return ec_domains_.Add();
}

// -------------------------------------------------------------------

// M3MonitorEcDomain

// optional int64 t_ecat_wait_rx = 1;
inline bool M3MonitorEcDomain::has_t_ecat_wait_rx() const {
  return _has_bit(0);
}
inline void M3MonitorEcDomain::clear_t_ecat_wait_rx() {
  t_ecat_wait_rx_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 M3MonitorEcDomain::t_ecat_wait_rx() const {
  return t_ecat_wait_rx_;
}
inline void M3MonitorEcDomain::set_t_ecat_wait_rx(::google::protobuf::int64 value) {
  _set_bit(0);
  t_ecat_wait_rx_ = value;
}

// optional int64 t_ecat_rx = 2;
inline bool M3MonitorEcDomain::has_t_ecat_rx() const {
  return _has_bit(1);
}
inline void M3MonitorEcDomain::clear_t_ecat_rx() {
  t_ecat_rx_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 M3MonitorEcDomain::t_ecat_rx() const {
  return t_ecat_rx_;
}
inline void M3MonitorEcDomain::set_t_ecat_rx(::google::protobuf::int64 value) {
  _set_bit(1);
  t_ecat_rx_ = value;
}

// optional int64 t_ecat_wait_shm = 3;
inline bool M3MonitorEcDomain::has_t_ecat_wait_shm() const {
  return _has_bit(2);
}
inline void M3MonitorEcDomain::clear_t_ecat_wait_shm() {
  t_ecat_wait_shm_ = GOOGLE_LONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::int64 M3MonitorEcDomain::t_ecat_wait_shm() const {
  return t_ecat_wait_shm_;
}
inline void M3MonitorEcDomain::set_t_ecat_wait_shm(::google::protobuf::int64 value) {
  _set_bit(2);
  t_ecat_wait_shm_ = value;
}

// optional int64 t_ecat_shm = 4;
inline bool M3MonitorEcDomain::has_t_ecat_shm() const {
  return _has_bit(3);
}
inline void M3MonitorEcDomain::clear_t_ecat_shm() {
  t_ecat_shm_ = GOOGLE_LONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::int64 M3MonitorEcDomain::t_ecat_shm() const {
  return t_ecat_shm_;
}
inline void M3MonitorEcDomain::set_t_ecat_shm(::google::protobuf::int64 value) {
  _set_bit(3);
  t_ecat_shm_ = value;
}

// optional int64 t_ecat_wait_tx = 5;
inline bool M3MonitorEcDomain::has_t_ecat_wait_tx() const {
  return _has_bit(4);
}
inline void M3MonitorEcDomain::clear_t_ecat_wait_tx() {
  t_ecat_wait_tx_ = GOOGLE_LONGLONG(0);
  _clear_bit(4);
}
inline ::google::protobuf::int64 M3MonitorEcDomain::t_ecat_wait_tx() const {
  return t_ecat_wait_tx_;
}
inline void M3MonitorEcDomain::set_t_ecat_wait_tx(::google::protobuf::int64 value) {
  _set_bit(4);
  t_ecat_wait_tx_ = value;
}

// optional int64 t_ecat_tx = 6;
inline bool M3MonitorEcDomain::has_t_ecat_tx() const {
  return _has_bit(5);
}
inline void M3MonitorEcDomain::clear_t_ecat_tx() {
  t_ecat_tx_ = GOOGLE_LONGLONG(0);
  _clear_bit(5);
}
inline ::google::protobuf::int64 M3MonitorEcDomain::t_ecat_tx() const {
  return t_ecat_tx_;
}
inline void M3MonitorEcDomain::set_t_ecat_tx(::google::protobuf::int64 value) {
  _set_bit(5);
  t_ecat_tx_ = value;
}


#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< M3COMP_STATE>() {
  return M3COMP_STATE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_component_5fbase_2eproto__INCLUDED
