// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "component_base.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace {

const ::google::protobuf::Descriptor* M3StatusAll_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3StatusAll_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3CommandAll_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3CommandAll_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3StatusLogPage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3StatusLogPage_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3BaseStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3BaseStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3EtherCATStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3EtherCATStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3MonitorComponent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3MonitorComponent_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3MonitorCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3MonitorCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3MonitorParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3MonitorParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3MonitorStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3MonitorStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3MonitorEcDomain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3MonitorEcDomain_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* M3COMP_STATE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_component_5fbase_2eproto() {
  protobuf_AddDesc_component_5fbase_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "component_base.proto");
  GOOGLE_CHECK(file != NULL);
  M3StatusAll_descriptor_ = file->message_type(0);
  static const int M3StatusAll_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3StatusAll, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3StatusAll, datum_),
  };
  M3StatusAll_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3StatusAll_descriptor_,
      M3StatusAll::default_instance_,
      M3StatusAll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3StatusAll, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3StatusAll, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3StatusAll));
  M3CommandAll_descriptor_ = file->message_type(1);
  static const int M3CommandAll_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3CommandAll, name_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3CommandAll, name_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3CommandAll, datum_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3CommandAll, datum_param_),
  };
  M3CommandAll_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3CommandAll_descriptor_,
      M3CommandAll::default_instance_,
      M3CommandAll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3CommandAll, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3CommandAll, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3CommandAll));
  M3StatusLogPage_descriptor_ = file->message_type(2);
  static const int M3StatusLogPage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3StatusLogPage, entry_),
  };
  M3StatusLogPage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3StatusLogPage_descriptor_,
      M3StatusLogPage::default_instance_,
      M3StatusLogPage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3StatusLogPage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3StatusLogPage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3StatusLogPage));
  M3BaseStatus_descriptor_ = file->message_type(3);
  static const int M3BaseStatus_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3BaseStatus, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3BaseStatus, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3BaseStatus, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3BaseStatus, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3BaseStatus, version_),
  };
  M3BaseStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3BaseStatus_descriptor_,
      M3BaseStatus::default_instance_,
      M3BaseStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3BaseStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3BaseStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3BaseStatus));
  M3EtherCATStatus_descriptor_ = file->message_type(4);
  static const int M3EtherCATStatus_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3EtherCATStatus, network_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3EtherCATStatus, serial_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3EtherCATStatus, product_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3EtherCATStatus, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3EtherCATStatus, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3EtherCATStatus, operational_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3EtherCATStatus, al_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3EtherCATStatus, pdo_version_),
  };
  M3EtherCATStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3EtherCATStatus_descriptor_,
      M3EtherCATStatus::default_instance_,
      M3EtherCATStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3EtherCATStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3EtherCATStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3EtherCATStatus));
  M3MonitorComponent_descriptor_ = file->message_type(5);
  static const int M3MonitorComponent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MonitorComponent, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MonitorComponent, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MonitorComponent, cycle_time_status_us_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MonitorComponent, cycle_time_command_us_),
  };
  M3MonitorComponent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3MonitorComponent_descriptor_,
      M3MonitorComponent::default_instance_,
      M3MonitorComponent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MonitorComponent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MonitorComponent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3MonitorComponent));
  M3MonitorCommand_descriptor_ = file->message_type(6);
  static const int M3MonitorCommand_offsets_[1] = {
  };
  M3MonitorCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3MonitorCommand_descriptor_,
      M3MonitorCommand::default_instance_,
      M3MonitorCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MonitorCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MonitorCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3MonitorCommand));
  M3MonitorParam_descriptor_ = file->message_type(7);
  static const int M3MonitorParam_offsets_[1] = {
  };
  M3MonitorParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3MonitorParam_descriptor_,
      M3MonitorParam::default_instance_,
      M3MonitorParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MonitorParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MonitorParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3MonitorParam));
  M3MonitorStatus_descriptor_ = file->message_type(8);
  static const int M3MonitorStatus_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MonitorStatus, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MonitorStatus, num_components_rt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MonitorStatus, num_components_ec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MonitorStatus, num_components_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MonitorStatus, num_components_safeop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MonitorStatus, num_components_op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MonitorStatus, num_components_err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MonitorStatus, operational_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MonitorStatus, cycle_time_status_us_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MonitorStatus, cycle_time_command_us_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MonitorStatus, cycle_time_us_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MonitorStatus, cycle_frequency_hz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MonitorStatus, components_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MonitorStatus, num_ethercat_cycles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MonitorStatus, cycle_time_max_us_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MonitorStatus, ec_domains_),
  };
  M3MonitorStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3MonitorStatus_descriptor_,
      M3MonitorStatus::default_instance_,
      M3MonitorStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MonitorStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MonitorStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3MonitorStatus));
  M3MonitorEcDomain_descriptor_ = file->message_type(9);
  static const int M3MonitorEcDomain_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MonitorEcDomain, t_ecat_wait_rx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MonitorEcDomain, t_ecat_rx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MonitorEcDomain, t_ecat_wait_shm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MonitorEcDomain, t_ecat_shm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MonitorEcDomain, t_ecat_wait_tx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MonitorEcDomain, t_ecat_tx_),
  };
  M3MonitorEcDomain_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3MonitorEcDomain_descriptor_,
      M3MonitorEcDomain::default_instance_,
      M3MonitorEcDomain_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MonitorEcDomain, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MonitorEcDomain, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3MonitorEcDomain));
  M3COMP_STATE_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_component_5fbase_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3StatusAll_descriptor_, &M3StatusAll::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3CommandAll_descriptor_, &M3CommandAll::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3StatusLogPage_descriptor_, &M3StatusLogPage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3BaseStatus_descriptor_, &M3BaseStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3EtherCATStatus_descriptor_, &M3EtherCATStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3MonitorComponent_descriptor_, &M3MonitorComponent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3MonitorCommand_descriptor_, &M3MonitorCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3MonitorParam_descriptor_, &M3MonitorParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3MonitorStatus_descriptor_, &M3MonitorStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3MonitorEcDomain_descriptor_, &M3MonitorEcDomain::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_component_5fbase_2eproto() {
  delete M3StatusAll::default_instance_;
  delete M3StatusAll_reflection_;
  delete M3CommandAll::default_instance_;
  delete M3CommandAll_reflection_;
  delete M3StatusLogPage::default_instance_;
  delete M3StatusLogPage_reflection_;
  delete M3BaseStatus::default_instance_;
  delete M3BaseStatus_reflection_;
  delete M3EtherCATStatus::default_instance_;
  delete M3EtherCATStatus_reflection_;
  delete M3MonitorComponent::default_instance_;
  delete M3MonitorComponent_reflection_;
  delete M3MonitorCommand::default_instance_;
  delete M3MonitorCommand_reflection_;
  delete M3MonitorParam::default_instance_;
  delete M3MonitorParam_reflection_;
  delete M3MonitorStatus::default_instance_;
  delete M3MonitorStatus_reflection_;
  delete M3MonitorEcDomain::default_instance_;
  delete M3MonitorEcDomain_reflection_;
}

void protobuf_AddDesc_component_5fbase_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024component_base.proto\"*\n\013M3StatusAll\022\014\n"
    "\004name\030\001 \003(\t\022\r\n\005datum\030\002 \003(\014\"\\\n\014M3CommandA"
    "ll\022\020\n\010name_cmd\030\001 \003(\t\022\022\n\nname_param\030\002 \003(\t"
    "\022\021\n\tdatum_cmd\030\003 \003(\014\022\023\n\013datum_param\030\004 \003(\014"
    "\".\n\017M3StatusLogPage\022\033\n\005entry\030\001 \003(\0132\014.M3S"
    "tatusAll\"\205\001\n\014M3BaseStatus\022\014\n\004name\030\001 \001(\t\022"
    "/\n\005state\030\002 \001(\0162\r.M3COMP_STATE:\021M3COMP_ST"
    "ATE_INIT\022\021\n\ttimestamp\030\003 \001(\003\022\022\n\004rate\030\004 \001("
    "\t:\004fast\022\017\n\007version\030\005 \001(\t\"\273\001\n\020M3EtherCATS"
    "tatus\022\026\n\nnetwork_id\030\001 \001(\005:\002-1\022\031\n\rserial_"
    "number\030\002 \001(\005:\002-1\022\030\n\014product_code\030\003 \001(\005:\002"
    "-1\022\016\n\006active\030\004 \001(\005\022\016\n\006online\030\005 \001(\005\022\023\n\013op"
    "erational\030\006 \001(\005\022\020\n\010al_state\030\007 \001(\005\022\023\n\013pdo"
    "_version\030\024 \001(\t\"}\n\022M3MonitorComponent\022\014\n\004"
    "name\030\001 \001(\t\022\034\n\005state\030\002 \001(\0162\r.M3COMP_STATE"
    "\022\034\n\024cycle_time_status_us\030\003 \001(\001\022\035\n\025cycle_"
    "time_command_us\030\004 \001(\001\"\022\n\020M3MonitorComman"
    "d\"\020\n\016M3MonitorParam\"\340\003\n\017M3MonitorStatus\022"
    "\033\n\004base\030\001 \001(\0132\r.M3BaseStatus\022\031\n\021num_comp"
    "onents_rt\030\002 \001(\005\022\031\n\021num_components_ec\030\003 \001"
    "(\005\022\026\n\016num_components\030\004 \001(\005\022\035\n\025num_compon"
    "ents_safeop\030\005 \001(\005\022\031\n\021num_components_op\030\006"
    " \001(\005\022\032\n\022num_components_err\030\007 \001(\005\022\023\n\013oper"
    "ational\030\010 \001(\010\022\034\n\024cycle_time_status_us\030\t "
    "\001(\001\022\035\n\025cycle_time_command_us\030\n \001(\001\022\025\n\rcy"
    "cle_time_us\030\013 \001(\001\022\032\n\022cycle_frequency_hz\030"
    "\014 \001(\001\022\'\n\ncomponents\030\r \003(\0132\023.M3MonitorCom"
    "ponent\022\033\n\023num_ethercat_cycles\030\016 \001(\005\022\031\n\021c"
    "ycle_time_max_us\030\017 \001(\001\022&\n\nec_domains\030\020 \003"
    "(\0132\022.M3MonitorEcDomain\"\226\001\n\021M3MonitorEcDo"
    "main\022\026\n\016t_ecat_wait_rx\030\001 \001(\003\022\021\n\tt_ecat_r"
    "x\030\002 \001(\003\022\027\n\017t_ecat_wait_shm\030\003 \001(\003\022\022\n\nt_ec"
    "at_shm\030\004 \001(\003\022\026\n\016t_ecat_wait_tx\030\005 \001(\003\022\021\n\t"
    "t_ecat_tx\030\006 \001(\003*i\n\014M3COMP_STATE\022\025\n\021M3COM"
    "P_STATE_INIT\020\000\022\024\n\020M3COMP_STATE_ERR\020\001\022\027\n\023"
    "M3COMP_STATE_SAFEOP\020\002\022\023\n\017M3COMP_STATE_OP"
    "\020\003B\002H\001", 1446);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "component_base.proto", &protobuf_RegisterTypes);
  M3StatusAll::default_instance_ = new M3StatusAll();
  M3CommandAll::default_instance_ = new M3CommandAll();
  M3StatusLogPage::default_instance_ = new M3StatusLogPage();
  M3BaseStatus::default_instance_ = new M3BaseStatus();
  M3EtherCATStatus::default_instance_ = new M3EtherCATStatus();
  M3MonitorComponent::default_instance_ = new M3MonitorComponent();
  M3MonitorCommand::default_instance_ = new M3MonitorCommand();
  M3MonitorParam::default_instance_ = new M3MonitorParam();
  M3MonitorStatus::default_instance_ = new M3MonitorStatus();
  M3MonitorEcDomain::default_instance_ = new M3MonitorEcDomain();
  M3StatusAll::default_instance_->InitAsDefaultInstance();
  M3CommandAll::default_instance_->InitAsDefaultInstance();
  M3StatusLogPage::default_instance_->InitAsDefaultInstance();
  M3BaseStatus::default_instance_->InitAsDefaultInstance();
  M3EtherCATStatus::default_instance_->InitAsDefaultInstance();
  M3MonitorComponent::default_instance_->InitAsDefaultInstance();
  M3MonitorCommand::default_instance_->InitAsDefaultInstance();
  M3MonitorParam::default_instance_->InitAsDefaultInstance();
  M3MonitorStatus::default_instance_->InitAsDefaultInstance();
  M3MonitorEcDomain::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_component_5fbase_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_component_5fbase_2eproto {
  StaticDescriptorInitializer_component_5fbase_2eproto() {
    protobuf_AddDesc_component_5fbase_2eproto();
  }
} static_descriptor_initializer_component_5fbase_2eproto_;

const ::google::protobuf::EnumDescriptor* M3COMP_STATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3COMP_STATE_descriptor_;
}
bool M3COMP_STATE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int M3StatusAll::kNameFieldNumber;
const int M3StatusAll::kDatumFieldNumber;
#endif  // !_MSC_VER

M3StatusAll::M3StatusAll() {
  SharedCtor();
}

void M3StatusAll::InitAsDefaultInstance() {
}

M3StatusAll::M3StatusAll(const M3StatusAll& from) {
  SharedCtor();
  MergeFrom(from);
}

void M3StatusAll::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3StatusAll::~M3StatusAll() {
  SharedDtor();
}

void M3StatusAll::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* M3StatusAll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3StatusAll_descriptor_;
}

const M3StatusAll& M3StatusAll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_component_5fbase_2eproto();  return *default_instance_;
}

M3StatusAll* M3StatusAll::default_instance_ = NULL;

M3StatusAll* M3StatusAll::New() const {
  return new M3StatusAll;
}

void M3StatusAll::Clear() {
  name_.Clear();
  datum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3StatusAll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_name:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name(0).data(), this->name(0).length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(10)) goto parse_name;
        if (input->ExpectTag(18)) goto parse_datum;
        break;
      }
      
      // repeated bytes datum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_datum:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->add_datum()));
        if (input->ExpectTag(18)) goto parse_datum;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3StatusAll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    M3StatusAll::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated string name = 1;
  for (int i = 0; i < this->name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->name(i).data(), this->name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(i), output);
  }
  
  // repeated bytes datum = 2;
  for (int i = 0; i < this->datum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->datum(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3StatusAll::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string name = 1;
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name(i).data(), this->name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->name(i), target);
  }
  
  // repeated bytes datum = 2;
  for (int i = 0; i < this->datum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->datum(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3StatusAll::ByteSize() const {
  int total_size = 0;
  
  // repeated string name = 1;
  total_size += 1 * this->name_size();
  for (int i = 0; i < this->name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name(i));
  }
  
  // repeated bytes datum = 2;
  total_size += 1 * this->datum_size();
  for (int i = 0; i < this->datum_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->datum(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void M3StatusAll::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3StatusAll* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3StatusAll*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3StatusAll::MergeFrom(const M3StatusAll& from) {
  GOOGLE_CHECK_NE(&from, this);
  name_.MergeFrom(from.name_);
  datum_.MergeFrom(from.datum_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3StatusAll::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3StatusAll::CopyFrom(const M3StatusAll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3StatusAll::IsInitialized() const {
  
  return true;
}

void M3StatusAll::Swap(M3StatusAll* other) {
  if (other != this) {
    name_.Swap(&other->name_);
    datum_.Swap(&other->datum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3StatusAll::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3StatusAll_descriptor_;
  metadata.reflection = M3StatusAll_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3CommandAll::kNameCmdFieldNumber;
const int M3CommandAll::kNameParamFieldNumber;
const int M3CommandAll::kDatumCmdFieldNumber;
const int M3CommandAll::kDatumParamFieldNumber;
#endif  // !_MSC_VER

M3CommandAll::M3CommandAll() {
  SharedCtor();
}

void M3CommandAll::InitAsDefaultInstance() {
}

M3CommandAll::M3CommandAll(const M3CommandAll& from) {
  SharedCtor();
  MergeFrom(from);
}

void M3CommandAll::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3CommandAll::~M3CommandAll() {
  SharedDtor();
}

void M3CommandAll::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* M3CommandAll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3CommandAll_descriptor_;
}

const M3CommandAll& M3CommandAll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_component_5fbase_2eproto();  return *default_instance_;
}

M3CommandAll* M3CommandAll::default_instance_ = NULL;

M3CommandAll* M3CommandAll::New() const {
  return new M3CommandAll;
}

void M3CommandAll::Clear() {
  name_cmd_.Clear();
  name_param_.Clear();
  datum_cmd_.Clear();
  datum_param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3CommandAll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string name_cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_name_cmd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_name_cmd()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name_cmd(0).data(), this->name_cmd(0).length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(10)) goto parse_name_cmd;
        if (input->ExpectTag(18)) goto parse_name_param;
        break;
      }
      
      // repeated string name_param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_name_param:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_name_param()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name_param(0).data(), this->name_param(0).length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(18)) goto parse_name_param;
        if (input->ExpectTag(26)) goto parse_datum_cmd;
        break;
      }
      
      // repeated bytes datum_cmd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_datum_cmd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->add_datum_cmd()));
        if (input->ExpectTag(26)) goto parse_datum_cmd;
        if (input->ExpectTag(34)) goto parse_datum_param;
        break;
      }
      
      // repeated bytes datum_param = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_datum_param:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->add_datum_param()));
        if (input->ExpectTag(34)) goto parse_datum_param;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3CommandAll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    M3CommandAll::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated string name_cmd = 1;
  for (int i = 0; i < this->name_cmd_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->name_cmd(i).data(), this->name_cmd(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name_cmd(i), output);
  }
  
  // repeated string name_param = 2;
  for (int i = 0; i < this->name_param_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->name_param(i).data(), this->name_param(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name_param(i), output);
  }
  
  // repeated bytes datum_cmd = 3;
  for (int i = 0; i < this->datum_cmd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->datum_cmd(i), output);
  }
  
  // repeated bytes datum_param = 4;
  for (int i = 0; i < this->datum_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->datum_param(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3CommandAll::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string name_cmd = 1;
  for (int i = 0; i < this->name_cmd_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name_cmd(i).data(), this->name_cmd(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->name_cmd(i), target);
  }
  
  // repeated string name_param = 2;
  for (int i = 0; i < this->name_param_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name_param(i).data(), this->name_param(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->name_param(i), target);
  }
  
  // repeated bytes datum_cmd = 3;
  for (int i = 0; i < this->datum_cmd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->datum_cmd(i), target);
  }
  
  // repeated bytes datum_param = 4;
  for (int i = 0; i < this->datum_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->datum_param(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3CommandAll::ByteSize() const {
  int total_size = 0;
  
  // repeated string name_cmd = 1;
  total_size += 1 * this->name_cmd_size();
  for (int i = 0; i < this->name_cmd_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name_cmd(i));
  }
  
  // repeated string name_param = 2;
  total_size += 1 * this->name_param_size();
  for (int i = 0; i < this->name_param_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name_param(i));
  }
  
  // repeated bytes datum_cmd = 3;
  total_size += 1 * this->datum_cmd_size();
  for (int i = 0; i < this->datum_cmd_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->datum_cmd(i));
  }
  
  // repeated bytes datum_param = 4;
  total_size += 1 * this->datum_param_size();
  for (int i = 0; i < this->datum_param_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->datum_param(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void M3CommandAll::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3CommandAll* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3CommandAll*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3CommandAll::MergeFrom(const M3CommandAll& from) {
  GOOGLE_CHECK_NE(&from, this);
  name_cmd_.MergeFrom(from.name_cmd_);
  name_param_.MergeFrom(from.name_param_);
  datum_cmd_.MergeFrom(from.datum_cmd_);
  datum_param_.MergeFrom(from.datum_param_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3CommandAll::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3CommandAll::CopyFrom(const M3CommandAll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3CommandAll::IsInitialized() const {
  
  return true;
}

void M3CommandAll::Swap(M3CommandAll* other) {
  if (other != this) {
    name_cmd_.Swap(&other->name_cmd_);
    name_param_.Swap(&other->name_param_);
    datum_cmd_.Swap(&other->datum_cmd_);
    datum_param_.Swap(&other->datum_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3CommandAll::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3CommandAll_descriptor_;
  metadata.reflection = M3CommandAll_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3StatusLogPage::kEntryFieldNumber;
#endif  // !_MSC_VER

M3StatusLogPage::M3StatusLogPage() {
  SharedCtor();
}

void M3StatusLogPage::InitAsDefaultInstance() {
}

M3StatusLogPage::M3StatusLogPage(const M3StatusLogPage& from) {
  SharedCtor();
  MergeFrom(from);
}

void M3StatusLogPage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3StatusLogPage::~M3StatusLogPage() {
  SharedDtor();
}

void M3StatusLogPage::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* M3StatusLogPage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3StatusLogPage_descriptor_;
}

const M3StatusLogPage& M3StatusLogPage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_component_5fbase_2eproto();  return *default_instance_;
}

M3StatusLogPage* M3StatusLogPage::default_instance_ = NULL;

M3StatusLogPage* M3StatusLogPage::New() const {
  return new M3StatusLogPage;
}

void M3StatusLogPage::Clear() {
  entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3StatusLogPage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .M3StatusAll entry = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_entry:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_entry()));
        if (input->ExpectTag(10)) goto parse_entry;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3StatusLogPage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    M3StatusLogPage::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .M3StatusAll entry = 1;
  for (int i = 0; i < this->entry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->entry(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3StatusLogPage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .M3StatusAll entry = 1;
  for (int i = 0; i < this->entry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entry(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3StatusLogPage::ByteSize() const {
  int total_size = 0;
  
  // repeated .M3StatusAll entry = 1;
  total_size += 1 * this->entry_size();
  for (int i = 0; i < this->entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entry(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void M3StatusLogPage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3StatusLogPage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3StatusLogPage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3StatusLogPage::MergeFrom(const M3StatusLogPage& from) {
  GOOGLE_CHECK_NE(&from, this);
  entry_.MergeFrom(from.entry_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3StatusLogPage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3StatusLogPage::CopyFrom(const M3StatusLogPage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3StatusLogPage::IsInitialized() const {
  
  return true;
}

void M3StatusLogPage::Swap(M3StatusLogPage* other) {
  if (other != this) {
    entry_.Swap(&other->entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3StatusLogPage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3StatusLogPage_descriptor_;
  metadata.reflection = M3StatusLogPage_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string M3BaseStatus::_default_name_;
const ::std::string M3BaseStatus::_default_rate_("fast");
const ::std::string M3BaseStatus::_default_version_;
#ifndef _MSC_VER
const int M3BaseStatus::kNameFieldNumber;
const int M3BaseStatus::kStateFieldNumber;
const int M3BaseStatus::kTimestampFieldNumber;
const int M3BaseStatus::kRateFieldNumber;
const int M3BaseStatus::kVersionFieldNumber;
#endif  // !_MSC_VER

M3BaseStatus::M3BaseStatus() {
  SharedCtor();
}

void M3BaseStatus::InitAsDefaultInstance() {
}

M3BaseStatus::M3BaseStatus(const M3BaseStatus& from) {
  SharedCtor();
  MergeFrom(from);
}

void M3BaseStatus::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  state_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  rate_ = const_cast< ::std::string*>(&_default_rate_);
  version_ = const_cast< ::std::string*>(&_default_version_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3BaseStatus::~M3BaseStatus() {
  SharedDtor();
}

void M3BaseStatus::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (rate_ != &_default_rate_) {
    delete rate_;
  }
  if (version_ != &_default_version_) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* M3BaseStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3BaseStatus_descriptor_;
}

const M3BaseStatus& M3BaseStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_component_5fbase_2eproto();  return *default_instance_;
}

M3BaseStatus* M3BaseStatus::default_instance_ = NULL;

M3BaseStatus* M3BaseStatus::New() const {
  return new M3BaseStatus;
}

void M3BaseStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    state_ = 0;
    timestamp_ = GOOGLE_LONGLONG(0);
    if (_has_bit(3)) {
      if (rate_ != &_default_rate_) {
        rate_->assign(_default_rate_);
      }
    }
    if (_has_bit(4)) {
      if (version_ != &_default_version_) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3BaseStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }
      
      // optional .M3COMP_STATE state = 2 [default = M3COMP_STATE_INIT];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_state:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (M3COMP_STATE_IsValid(value)) {
          set_state(static_cast< M3COMP_STATE >(value));
        } else {
          mutable_unknown_fields()->AddVarint(2, value);
        }
        if (input->ExpectTag(24)) goto parse_timestamp;
        break;
      }
      
      // optional int64 timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_timestamp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &timestamp_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_rate;
        break;
      }
      
      // optional string rate = 4 [default = "fast"];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_rate:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_rate()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->rate().data(), this->rate().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(42)) goto parse_version;
        break;
      }
      
      // optional string version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_version:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_version()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->version().data(), this->version().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3BaseStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    M3BaseStatus::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional .M3COMP_STATE state = 2 [default = M3COMP_STATE_INIT];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }
  
  // optional int64 timestamp = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }
  
  // optional string rate = 4 [default = "fast"];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rate().data(), this->rate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->rate(), output);
  }
  
  // optional string version = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3BaseStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional .M3COMP_STATE state = 2 [default = M3COMP_STATE_INIT];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }
  
  // optional int64 timestamp = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timestamp(), target);
  }
  
  // optional string rate = 4 [default = "fast"];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rate().data(), this->rate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->rate(), target);
  }
  
  // optional string version = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3BaseStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional .M3COMP_STATE state = 2 [default = M3COMP_STATE_INIT];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
    // optional int64 timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }
    
    // optional string rate = 4 [default = "fast"];
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rate());
    }
    
    // optional string version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void M3BaseStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3BaseStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3BaseStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3BaseStatus::MergeFrom(const M3BaseStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_state(from.state());
    }
    if (from._has_bit(2)) {
      set_timestamp(from.timestamp());
    }
    if (from._has_bit(3)) {
      set_rate(from.rate());
    }
    if (from._has_bit(4)) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3BaseStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3BaseStatus::CopyFrom(const M3BaseStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3BaseStatus::IsInitialized() const {
  
  return true;
}

void M3BaseStatus::Swap(M3BaseStatus* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(state_, other->state_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(rate_, other->rate_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3BaseStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3BaseStatus_descriptor_;
  metadata.reflection = M3BaseStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string M3EtherCATStatus::_default_pdo_version_;
#ifndef _MSC_VER
const int M3EtherCATStatus::kNetworkIdFieldNumber;
const int M3EtherCATStatus::kSerialNumberFieldNumber;
const int M3EtherCATStatus::kProductCodeFieldNumber;
const int M3EtherCATStatus::kActiveFieldNumber;
const int M3EtherCATStatus::kOnlineFieldNumber;
const int M3EtherCATStatus::kOperationalFieldNumber;
const int M3EtherCATStatus::kAlStateFieldNumber;
const int M3EtherCATStatus::kPdoVersionFieldNumber;
#endif  // !_MSC_VER

M3EtherCATStatus::M3EtherCATStatus() {
  SharedCtor();
}

void M3EtherCATStatus::InitAsDefaultInstance() {
}

M3EtherCATStatus::M3EtherCATStatus(const M3EtherCATStatus& from) {
  SharedCtor();
  MergeFrom(from);
}

void M3EtherCATStatus::SharedCtor() {
  _cached_size_ = 0;
  network_id_ = -1;
  serial_number_ = -1;
  product_code_ = -1;
  active_ = 0;
  online_ = 0;
  operational_ = 0;
  al_state_ = 0;
  pdo_version_ = const_cast< ::std::string*>(&_default_pdo_version_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3EtherCATStatus::~M3EtherCATStatus() {
  SharedDtor();
}

void M3EtherCATStatus::SharedDtor() {
  if (pdo_version_ != &_default_pdo_version_) {
    delete pdo_version_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* M3EtherCATStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3EtherCATStatus_descriptor_;
}

const M3EtherCATStatus& M3EtherCATStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_component_5fbase_2eproto();  return *default_instance_;
}

M3EtherCATStatus* M3EtherCATStatus::default_instance_ = NULL;

M3EtherCATStatus* M3EtherCATStatus::New() const {
  return new M3EtherCATStatus;
}

void M3EtherCATStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    network_id_ = -1;
    serial_number_ = -1;
    product_code_ = -1;
    active_ = 0;
    online_ = 0;
    operational_ = 0;
    al_state_ = 0;
    if (_has_bit(7)) {
      if (pdo_version_ != &_default_pdo_version_) {
        pdo_version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3EtherCATStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 network_id = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &network_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_serial_number;
        break;
      }
      
      // optional int32 serial_number = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_serial_number:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &serial_number_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_product_code;
        break;
      }
      
      // optional int32 product_code = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_product_code:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &product_code_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_active;
        break;
      }
      
      // optional int32 active = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_active:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &active_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_online;
        break;
      }
      
      // optional int32 online = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_online:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &online_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_operational;
        break;
      }
      
      // optional int32 operational = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_operational:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &operational_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_al_state;
        break;
      }
      
      // optional int32 al_state = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_al_state:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &al_state_));
        _set_bit(6);
        if (input->ExpectTag(162)) goto parse_pdo_version;
        break;
      }
      
      // optional string pdo_version = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pdo_version:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_pdo_version()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->pdo_version().data(), this->pdo_version().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3EtherCATStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    M3EtherCATStatus::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 network_id = 1 [default = -1];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->network_id(), output);
  }
  
  // optional int32 serial_number = 2 [default = -1];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->serial_number(), output);
  }
  
  // optional int32 product_code = 3 [default = -1];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->product_code(), output);
  }
  
  // optional int32 active = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->active(), output);
  }
  
  // optional int32 online = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->online(), output);
  }
  
  // optional int32 operational = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->operational(), output);
  }
  
  // optional int32 al_state = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->al_state(), output);
  }
  
  // optional string pdo_version = 20;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pdo_version().data(), this->pdo_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->pdo_version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3EtherCATStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 network_id = 1 [default = -1];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->network_id(), target);
  }
  
  // optional int32 serial_number = 2 [default = -1];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->serial_number(), target);
  }
  
  // optional int32 product_code = 3 [default = -1];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->product_code(), target);
  }
  
  // optional int32 active = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->active(), target);
  }
  
  // optional int32 online = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->online(), target);
  }
  
  // optional int32 operational = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->operational(), target);
  }
  
  // optional int32 al_state = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->al_state(), target);
  }
  
  // optional string pdo_version = 20;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pdo_version().data(), this->pdo_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->pdo_version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3EtherCATStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 network_id = 1 [default = -1];
    if (has_network_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->network_id());
    }
    
    // optional int32 serial_number = 2 [default = -1];
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serial_number());
    }
    
    // optional int32 product_code = 3 [default = -1];
    if (has_product_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->product_code());
    }
    
    // optional int32 active = 4;
    if (has_active()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active());
    }
    
    // optional int32 online = 5;
    if (has_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->online());
    }
    
    // optional int32 operational = 6;
    if (has_operational()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operational());
    }
    
    // optional int32 al_state = 7;
    if (has_al_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->al_state());
    }
    
    // optional string pdo_version = 20;
    if (has_pdo_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pdo_version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void M3EtherCATStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3EtherCATStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3EtherCATStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3EtherCATStatus::MergeFrom(const M3EtherCATStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_network_id(from.network_id());
    }
    if (from._has_bit(1)) {
      set_serial_number(from.serial_number());
    }
    if (from._has_bit(2)) {
      set_product_code(from.product_code());
    }
    if (from._has_bit(3)) {
      set_active(from.active());
    }
    if (from._has_bit(4)) {
      set_online(from.online());
    }
    if (from._has_bit(5)) {
      set_operational(from.operational());
    }
    if (from._has_bit(6)) {
      set_al_state(from.al_state());
    }
    if (from._has_bit(7)) {
      set_pdo_version(from.pdo_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3EtherCATStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3EtherCATStatus::CopyFrom(const M3EtherCATStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3EtherCATStatus::IsInitialized() const {
  
  return true;
}

void M3EtherCATStatus::Swap(M3EtherCATStatus* other) {
  if (other != this) {
    std::swap(network_id_, other->network_id_);
    std::swap(serial_number_, other->serial_number_);
    std::swap(product_code_, other->product_code_);
    std::swap(active_, other->active_);
    std::swap(online_, other->online_);
    std::swap(operational_, other->operational_);
    std::swap(al_state_, other->al_state_);
    std::swap(pdo_version_, other->pdo_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3EtherCATStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3EtherCATStatus_descriptor_;
  metadata.reflection = M3EtherCATStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string M3MonitorComponent::_default_name_;
#ifndef _MSC_VER
const int M3MonitorComponent::kNameFieldNumber;
const int M3MonitorComponent::kStateFieldNumber;
const int M3MonitorComponent::kCycleTimeStatusUsFieldNumber;
const int M3MonitorComponent::kCycleTimeCommandUsFieldNumber;
#endif  // !_MSC_VER

M3MonitorComponent::M3MonitorComponent() {
  SharedCtor();
}

void M3MonitorComponent::InitAsDefaultInstance() {
}

M3MonitorComponent::M3MonitorComponent(const M3MonitorComponent& from) {
  SharedCtor();
  MergeFrom(from);
}

void M3MonitorComponent::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  state_ = 0;
  cycle_time_status_us_ = 0;
  cycle_time_command_us_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3MonitorComponent::~M3MonitorComponent() {
  SharedDtor();
}

void M3MonitorComponent::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* M3MonitorComponent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3MonitorComponent_descriptor_;
}

const M3MonitorComponent& M3MonitorComponent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_component_5fbase_2eproto();  return *default_instance_;
}

M3MonitorComponent* M3MonitorComponent::default_instance_ = NULL;

M3MonitorComponent* M3MonitorComponent::New() const {
  return new M3MonitorComponent;
}

void M3MonitorComponent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    state_ = 0;
    cycle_time_status_us_ = 0;
    cycle_time_command_us_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3MonitorComponent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }
      
      // optional .M3COMP_STATE state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_state:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (M3COMP_STATE_IsValid(value)) {
          set_state(static_cast< M3COMP_STATE >(value));
        } else {
          mutable_unknown_fields()->AddVarint(2, value);
        }
        if (input->ExpectTag(25)) goto parse_cycle_time_status_us;
        break;
      }
      
      // optional double cycle_time_status_us = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_cycle_time_status_us:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &cycle_time_status_us_));
        _set_bit(2);
        if (input->ExpectTag(33)) goto parse_cycle_time_command_us;
        break;
      }
      
      // optional double cycle_time_command_us = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_cycle_time_command_us:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &cycle_time_command_us_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3MonitorComponent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    M3MonitorComponent::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional .M3COMP_STATE state = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }
  
  // optional double cycle_time_status_us = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->cycle_time_status_us(), output);
  }
  
  // optional double cycle_time_command_us = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->cycle_time_command_us(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3MonitorComponent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional .M3COMP_STATE state = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }
  
  // optional double cycle_time_status_us = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->cycle_time_status_us(), target);
  }
  
  // optional double cycle_time_command_us = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->cycle_time_command_us(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3MonitorComponent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional .M3COMP_STATE state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
    // optional double cycle_time_status_us = 3;
    if (has_cycle_time_status_us()) {
      total_size += 1 + 8;
    }
    
    // optional double cycle_time_command_us = 4;
    if (has_cycle_time_command_us()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void M3MonitorComponent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3MonitorComponent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3MonitorComponent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3MonitorComponent::MergeFrom(const M3MonitorComponent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_state(from.state());
    }
    if (from._has_bit(2)) {
      set_cycle_time_status_us(from.cycle_time_status_us());
    }
    if (from._has_bit(3)) {
      set_cycle_time_command_us(from.cycle_time_command_us());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3MonitorComponent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3MonitorComponent::CopyFrom(const M3MonitorComponent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3MonitorComponent::IsInitialized() const {
  
  return true;
}

void M3MonitorComponent::Swap(M3MonitorComponent* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(state_, other->state_);
    std::swap(cycle_time_status_us_, other->cycle_time_status_us_);
    std::swap(cycle_time_command_us_, other->cycle_time_command_us_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3MonitorComponent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3MonitorComponent_descriptor_;
  metadata.reflection = M3MonitorComponent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

M3MonitorCommand::M3MonitorCommand() {
  SharedCtor();
}

void M3MonitorCommand::InitAsDefaultInstance() {
}

M3MonitorCommand::M3MonitorCommand(const M3MonitorCommand& from) {
  SharedCtor();
  MergeFrom(from);
}

void M3MonitorCommand::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3MonitorCommand::~M3MonitorCommand() {
  SharedDtor();
}

void M3MonitorCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* M3MonitorCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3MonitorCommand_descriptor_;
}

const M3MonitorCommand& M3MonitorCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_component_5fbase_2eproto();  return *default_instance_;
}

M3MonitorCommand* M3MonitorCommand::default_instance_ = NULL;

M3MonitorCommand* M3MonitorCommand::New() const {
  return new M3MonitorCommand;
}

void M3MonitorCommand::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3MonitorCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void M3MonitorCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    M3MonitorCommand::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3MonitorCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3MonitorCommand::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void M3MonitorCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3MonitorCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3MonitorCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3MonitorCommand::MergeFrom(const M3MonitorCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3MonitorCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3MonitorCommand::CopyFrom(const M3MonitorCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3MonitorCommand::IsInitialized() const {
  
  return true;
}

void M3MonitorCommand::Swap(M3MonitorCommand* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3MonitorCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3MonitorCommand_descriptor_;
  metadata.reflection = M3MonitorCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

M3MonitorParam::M3MonitorParam() {
  SharedCtor();
}

void M3MonitorParam::InitAsDefaultInstance() {
}

M3MonitorParam::M3MonitorParam(const M3MonitorParam& from) {
  SharedCtor();
  MergeFrom(from);
}

void M3MonitorParam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3MonitorParam::~M3MonitorParam() {
  SharedDtor();
}

void M3MonitorParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* M3MonitorParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3MonitorParam_descriptor_;
}

const M3MonitorParam& M3MonitorParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_component_5fbase_2eproto();  return *default_instance_;
}

M3MonitorParam* M3MonitorParam::default_instance_ = NULL;

M3MonitorParam* M3MonitorParam::New() const {
  return new M3MonitorParam;
}

void M3MonitorParam::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3MonitorParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void M3MonitorParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    M3MonitorParam::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3MonitorParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3MonitorParam::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void M3MonitorParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3MonitorParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3MonitorParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3MonitorParam::MergeFrom(const M3MonitorParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3MonitorParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3MonitorParam::CopyFrom(const M3MonitorParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3MonitorParam::IsInitialized() const {
  
  return true;
}

void M3MonitorParam::Swap(M3MonitorParam* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3MonitorParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3MonitorParam_descriptor_;
  metadata.reflection = M3MonitorParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3MonitorStatus::kBaseFieldNumber;
const int M3MonitorStatus::kNumComponentsRtFieldNumber;
const int M3MonitorStatus::kNumComponentsEcFieldNumber;
const int M3MonitorStatus::kNumComponentsFieldNumber;
const int M3MonitorStatus::kNumComponentsSafeopFieldNumber;
const int M3MonitorStatus::kNumComponentsOpFieldNumber;
const int M3MonitorStatus::kNumComponentsErrFieldNumber;
const int M3MonitorStatus::kOperationalFieldNumber;
const int M3MonitorStatus::kCycleTimeStatusUsFieldNumber;
const int M3MonitorStatus::kCycleTimeCommandUsFieldNumber;
const int M3MonitorStatus::kCycleTimeUsFieldNumber;
const int M3MonitorStatus::kCycleFrequencyHzFieldNumber;
const int M3MonitorStatus::kComponentsFieldNumber;
const int M3MonitorStatus::kNumEthercatCyclesFieldNumber;
const int M3MonitorStatus::kCycleTimeMaxUsFieldNumber;
const int M3MonitorStatus::kEcDomainsFieldNumber;
#endif  // !_MSC_VER

M3MonitorStatus::M3MonitorStatus() {
  SharedCtor();
}

void M3MonitorStatus::InitAsDefaultInstance() {
  base_ = const_cast< ::M3BaseStatus*>(&::M3BaseStatus::default_instance());
}

M3MonitorStatus::M3MonitorStatus(const M3MonitorStatus& from) {
  SharedCtor();
  MergeFrom(from);
}

void M3MonitorStatus::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  num_components_rt_ = 0;
  num_components_ec_ = 0;
  num_components_ = 0;
  num_components_safeop_ = 0;
  num_components_op_ = 0;
  num_components_err_ = 0;
  operational_ = false;
  cycle_time_status_us_ = 0;
  cycle_time_command_us_ = 0;
  cycle_time_us_ = 0;
  cycle_frequency_hz_ = 0;
  num_ethercat_cycles_ = 0;
  cycle_time_max_us_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3MonitorStatus::~M3MonitorStatus() {
  SharedDtor();
}

void M3MonitorStatus::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

const ::google::protobuf::Descriptor* M3MonitorStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3MonitorStatus_descriptor_;
}

const M3MonitorStatus& M3MonitorStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_component_5fbase_2eproto();  return *default_instance_;
}

M3MonitorStatus* M3MonitorStatus::default_instance_ = NULL;

M3MonitorStatus* M3MonitorStatus::New() const {
  return new M3MonitorStatus;
}

void M3MonitorStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (base_ != NULL) base_->::M3BaseStatus::Clear();
    }
    num_components_rt_ = 0;
    num_components_ec_ = 0;
    num_components_ = 0;
    num_components_safeop_ = 0;
    num_components_op_ = 0;
    num_components_err_ = 0;
    operational_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cycle_time_status_us_ = 0;
    cycle_time_command_us_ = 0;
    cycle_time_us_ = 0;
    cycle_frequency_hz_ = 0;
    num_ethercat_cycles_ = 0;
    cycle_time_max_us_ = 0;
  }
  components_.Clear();
  ec_domains_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3MonitorStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .M3BaseStatus base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_base()));
        if (input->ExpectTag(16)) goto parse_num_components_rt;
        break;
      }
      
      // optional int32 num_components_rt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_num_components_rt:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &num_components_rt_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_num_components_ec;
        break;
      }
      
      // optional int32 num_components_ec = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_num_components_ec:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &num_components_ec_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_num_components;
        break;
      }
      
      // optional int32 num_components = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_num_components:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &num_components_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_num_components_safeop;
        break;
      }
      
      // optional int32 num_components_safeop = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_num_components_safeop:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &num_components_safeop_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_num_components_op;
        break;
      }
      
      // optional int32 num_components_op = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_num_components_op:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &num_components_op_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_num_components_err;
        break;
      }
      
      // optional int32 num_components_err = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_num_components_err:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &num_components_err_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_operational;
        break;
      }
      
      // optional bool operational = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_operational:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &operational_));
        _set_bit(7);
        if (input->ExpectTag(73)) goto parse_cycle_time_status_us;
        break;
      }
      
      // optional double cycle_time_status_us = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_cycle_time_status_us:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &cycle_time_status_us_));
        _set_bit(8);
        if (input->ExpectTag(81)) goto parse_cycle_time_command_us;
        break;
      }
      
      // optional double cycle_time_command_us = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_cycle_time_command_us:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &cycle_time_command_us_));
        _set_bit(9);
        if (input->ExpectTag(89)) goto parse_cycle_time_us;
        break;
      }
      
      // optional double cycle_time_us = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_cycle_time_us:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &cycle_time_us_));
        _set_bit(10);
        if (input->ExpectTag(97)) goto parse_cycle_frequency_hz;
        break;
      }
      
      // optional double cycle_frequency_hz = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_cycle_frequency_hz:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &cycle_frequency_hz_));
        _set_bit(11);
        if (input->ExpectTag(106)) goto parse_components;
        break;
      }
      
      // repeated .M3MonitorComponent components = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_components:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_components()));
        if (input->ExpectTag(106)) goto parse_components;
        if (input->ExpectTag(112)) goto parse_num_ethercat_cycles;
        break;
      }
      
      // optional int32 num_ethercat_cycles = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_num_ethercat_cycles:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &num_ethercat_cycles_));
        _set_bit(13);
        if (input->ExpectTag(121)) goto parse_cycle_time_max_us;
        break;
      }
      
      // optional double cycle_time_max_us = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_cycle_time_max_us:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &cycle_time_max_us_));
        _set_bit(14);
        if (input->ExpectTag(130)) goto parse_ec_domains;
        break;
      }
      
      // repeated .M3MonitorEcDomain ec_domains = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ec_domains:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_ec_domains()));
        if (input->ExpectTag(130)) goto parse_ec_domains;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3MonitorStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    M3MonitorStatus::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .M3BaseStatus base = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->base(), output);
  }
  
  // optional int32 num_components_rt = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_components_rt(), output);
  }
  
  // optional int32 num_components_ec = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_components_ec(), output);
  }
  
  // optional int32 num_components = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_components(), output);
  }
  
  // optional int32 num_components_safeop = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->num_components_safeop(), output);
  }
  
  // optional int32 num_components_op = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->num_components_op(), output);
  }
  
  // optional int32 num_components_err = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->num_components_err(), output);
  }
  
  // optional bool operational = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->operational(), output);
  }
  
  // optional double cycle_time_status_us = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->cycle_time_status_us(), output);
  }
  
  // optional double cycle_time_command_us = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->cycle_time_command_us(), output);
  }
  
  // optional double cycle_time_us = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->cycle_time_us(), output);
  }
  
  // optional double cycle_frequency_hz = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->cycle_frequency_hz(), output);
  }
  
  // repeated .M3MonitorComponent components = 13;
  for (int i = 0; i < this->components_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      13, this->components(i), output);
  }
  
  // optional int32 num_ethercat_cycles = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->num_ethercat_cycles(), output);
  }
  
  // optional double cycle_time_max_us = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->cycle_time_max_us(), output);
  }
  
  // repeated .M3MonitorEcDomain ec_domains = 16;
  for (int i = 0; i < this->ec_domains_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      16, this->ec_domains(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3MonitorStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .M3BaseStatus base = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }
  
  // optional int32 num_components_rt = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_components_rt(), target);
  }
  
  // optional int32 num_components_ec = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_components_ec(), target);
  }
  
  // optional int32 num_components = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num_components(), target);
  }
  
  // optional int32 num_components_safeop = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->num_components_safeop(), target);
  }
  
  // optional int32 num_components_op = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->num_components_op(), target);
  }
  
  // optional int32 num_components_err = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->num_components_err(), target);
  }
  
  // optional bool operational = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->operational(), target);
  }
  
  // optional double cycle_time_status_us = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->cycle_time_status_us(), target);
  }
  
  // optional double cycle_time_command_us = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->cycle_time_command_us(), target);
  }
  
  // optional double cycle_time_us = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->cycle_time_us(), target);
  }
  
  // optional double cycle_frequency_hz = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->cycle_frequency_hz(), target);
  }
  
  // repeated .M3MonitorComponent components = 13;
  for (int i = 0; i < this->components_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->components(i), target);
  }
  
  // optional int32 num_ethercat_cycles = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->num_ethercat_cycles(), target);
  }
  
  // optional double cycle_time_max_us = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->cycle_time_max_us(), target);
  }
  
  // repeated .M3MonitorEcDomain ec_domains = 16;
  for (int i = 0; i < this->ec_domains_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->ec_domains(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3MonitorStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .M3BaseStatus base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }
    
    // optional int32 num_components_rt = 2;
    if (has_num_components_rt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_components_rt());
    }
    
    // optional int32 num_components_ec = 3;
    if (has_num_components_ec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_components_ec());
    }
    
    // optional int32 num_components = 4;
    if (has_num_components()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_components());
    }
    
    // optional int32 num_components_safeop = 5;
    if (has_num_components_safeop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_components_safeop());
    }
    
    // optional int32 num_components_op = 6;
    if (has_num_components_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_components_op());
    }
    
    // optional int32 num_components_err = 7;
    if (has_num_components_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_components_err());
    }
    
    // optional bool operational = 8;
    if (has_operational()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double cycle_time_status_us = 9;
    if (has_cycle_time_status_us()) {
      total_size += 1 + 8;
    }
    
    // optional double cycle_time_command_us = 10;
    if (has_cycle_time_command_us()) {
      total_size += 1 + 8;
    }
    
    // optional double cycle_time_us = 11;
    if (has_cycle_time_us()) {
      total_size += 1 + 8;
    }
    
    // optional double cycle_frequency_hz = 12;
    if (has_cycle_frequency_hz()) {
      total_size += 1 + 8;
    }
    
    // optional int32 num_ethercat_cycles = 14;
    if (has_num_ethercat_cycles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_ethercat_cycles());
    }
    
    // optional double cycle_time_max_us = 15;
    if (has_cycle_time_max_us()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated .M3MonitorComponent components = 13;
  total_size += 1 * this->components_size();
  for (int i = 0; i < this->components_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->components(i));
  }
  
  // repeated .M3MonitorEcDomain ec_domains = 16;
  total_size += 2 * this->ec_domains_size();
  for (int i = 0; i < this->ec_domains_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ec_domains(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void M3MonitorStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3MonitorStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3MonitorStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3MonitorStatus::MergeFrom(const M3MonitorStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  components_.MergeFrom(from.components_);
  ec_domains_.MergeFrom(from.ec_domains_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_base()->::M3BaseStatus::MergeFrom(from.base());
    }
    if (from._has_bit(1)) {
      set_num_components_rt(from.num_components_rt());
    }
    if (from._has_bit(2)) {
      set_num_components_ec(from.num_components_ec());
    }
    if (from._has_bit(3)) {
      set_num_components(from.num_components());
    }
    if (from._has_bit(4)) {
      set_num_components_safeop(from.num_components_safeop());
    }
    if (from._has_bit(5)) {
      set_num_components_op(from.num_components_op());
    }
    if (from._has_bit(6)) {
      set_num_components_err(from.num_components_err());
    }
    if (from._has_bit(7)) {
      set_operational(from.operational());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_cycle_time_status_us(from.cycle_time_status_us());
    }
    if (from._has_bit(9)) {
      set_cycle_time_command_us(from.cycle_time_command_us());
    }
    if (from._has_bit(10)) {
      set_cycle_time_us(from.cycle_time_us());
    }
    if (from._has_bit(11)) {
      set_cycle_frequency_hz(from.cycle_frequency_hz());
    }
    if (from._has_bit(13)) {
      set_num_ethercat_cycles(from.num_ethercat_cycles());
    }
    if (from._has_bit(14)) {
      set_cycle_time_max_us(from.cycle_time_max_us());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3MonitorStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3MonitorStatus::CopyFrom(const M3MonitorStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3MonitorStatus::IsInitialized() const {
  
  return true;
}

void M3MonitorStatus::Swap(M3MonitorStatus* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(num_components_rt_, other->num_components_rt_);
    std::swap(num_components_ec_, other->num_components_ec_);
    std::swap(num_components_, other->num_components_);
    std::swap(num_components_safeop_, other->num_components_safeop_);
    std::swap(num_components_op_, other->num_components_op_);
    std::swap(num_components_err_, other->num_components_err_);
    std::swap(operational_, other->operational_);
    std::swap(cycle_time_status_us_, other->cycle_time_status_us_);
    std::swap(cycle_time_command_us_, other->cycle_time_command_us_);
    std::swap(cycle_time_us_, other->cycle_time_us_);
    std::swap(cycle_frequency_hz_, other->cycle_frequency_hz_);
    components_.Swap(&other->components_);
    std::swap(num_ethercat_cycles_, other->num_ethercat_cycles_);
    std::swap(cycle_time_max_us_, other->cycle_time_max_us_);
    ec_domains_.Swap(&other->ec_domains_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3MonitorStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3MonitorStatus_descriptor_;
  metadata.reflection = M3MonitorStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3MonitorEcDomain::kTEcatWaitRxFieldNumber;
const int M3MonitorEcDomain::kTEcatRxFieldNumber;
const int M3MonitorEcDomain::kTEcatWaitShmFieldNumber;
const int M3MonitorEcDomain::kTEcatShmFieldNumber;
const int M3MonitorEcDomain::kTEcatWaitTxFieldNumber;
const int M3MonitorEcDomain::kTEcatTxFieldNumber;
#endif  // !_MSC_VER

M3MonitorEcDomain::M3MonitorEcDomain() {
  SharedCtor();
}

void M3MonitorEcDomain::InitAsDefaultInstance() {
}

M3MonitorEcDomain::M3MonitorEcDomain(const M3MonitorEcDomain& from) {
  SharedCtor();
  MergeFrom(from);
}

void M3MonitorEcDomain::SharedCtor() {
  _cached_size_ = 0;
  t_ecat_wait_rx_ = GOOGLE_LONGLONG(0);
  t_ecat_rx_ = GOOGLE_LONGLONG(0);
  t_ecat_wait_shm_ = GOOGLE_LONGLONG(0);
  t_ecat_shm_ = GOOGLE_LONGLONG(0);
  t_ecat_wait_tx_ = GOOGLE_LONGLONG(0);
  t_ecat_tx_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3MonitorEcDomain::~M3MonitorEcDomain() {
  SharedDtor();
}

void M3MonitorEcDomain::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* M3MonitorEcDomain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3MonitorEcDomain_descriptor_;
}

const M3MonitorEcDomain& M3MonitorEcDomain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_component_5fbase_2eproto();  return *default_instance_;
}

M3MonitorEcDomain* M3MonitorEcDomain::default_instance_ = NULL;

M3MonitorEcDomain* M3MonitorEcDomain::New() const {
  return new M3MonitorEcDomain;
}

void M3MonitorEcDomain::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    t_ecat_wait_rx_ = GOOGLE_LONGLONG(0);
    t_ecat_rx_ = GOOGLE_LONGLONG(0);
    t_ecat_wait_shm_ = GOOGLE_LONGLONG(0);
    t_ecat_shm_ = GOOGLE_LONGLONG(0);
    t_ecat_wait_tx_ = GOOGLE_LONGLONG(0);
    t_ecat_tx_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3MonitorEcDomain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 t_ecat_wait_rx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &t_ecat_wait_rx_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_t_ecat_rx;
        break;
      }
      
      // optional int64 t_ecat_rx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_t_ecat_rx:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &t_ecat_rx_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_t_ecat_wait_shm;
        break;
      }
      
      // optional int64 t_ecat_wait_shm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_t_ecat_wait_shm:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &t_ecat_wait_shm_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_t_ecat_shm;
        break;
      }
      
      // optional int64 t_ecat_shm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_t_ecat_shm:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &t_ecat_shm_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_t_ecat_wait_tx;
        break;
      }
      
      // optional int64 t_ecat_wait_tx = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_t_ecat_wait_tx:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &t_ecat_wait_tx_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_t_ecat_tx;
        break;
      }
      
      // optional int64 t_ecat_tx = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_t_ecat_tx:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &t_ecat_tx_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3MonitorEcDomain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    M3MonitorEcDomain::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int64 t_ecat_wait_rx = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->t_ecat_wait_rx(), output);
  }
  
  // optional int64 t_ecat_rx = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->t_ecat_rx(), output);
  }
  
  // optional int64 t_ecat_wait_shm = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->t_ecat_wait_shm(), output);
  }
  
  // optional int64 t_ecat_shm = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->t_ecat_shm(), output);
  }
  
  // optional int64 t_ecat_wait_tx = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->t_ecat_wait_tx(), output);
  }
  
  // optional int64 t_ecat_tx = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->t_ecat_tx(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3MonitorEcDomain::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 t_ecat_wait_rx = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->t_ecat_wait_rx(), target);
  }
  
  // optional int64 t_ecat_rx = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->t_ecat_rx(), target);
  }
  
  // optional int64 t_ecat_wait_shm = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->t_ecat_wait_shm(), target);
  }
  
  // optional int64 t_ecat_shm = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->t_ecat_shm(), target);
  }
  
  // optional int64 t_ecat_wait_tx = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->t_ecat_wait_tx(), target);
  }
  
  // optional int64 t_ecat_tx = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->t_ecat_tx(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3MonitorEcDomain::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 t_ecat_wait_rx = 1;
    if (has_t_ecat_wait_rx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->t_ecat_wait_rx());
    }
    
    // optional int64 t_ecat_rx = 2;
    if (has_t_ecat_rx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->t_ecat_rx());
    }
    
    // optional int64 t_ecat_wait_shm = 3;
    if (has_t_ecat_wait_shm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->t_ecat_wait_shm());
    }
    
    // optional int64 t_ecat_shm = 4;
    if (has_t_ecat_shm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->t_ecat_shm());
    }
    
    // optional int64 t_ecat_wait_tx = 5;
    if (has_t_ecat_wait_tx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->t_ecat_wait_tx());
    }
    
    // optional int64 t_ecat_tx = 6;
    if (has_t_ecat_tx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->t_ecat_tx());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void M3MonitorEcDomain::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3MonitorEcDomain* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3MonitorEcDomain*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3MonitorEcDomain::MergeFrom(const M3MonitorEcDomain& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_t_ecat_wait_rx(from.t_ecat_wait_rx());
    }
    if (from._has_bit(1)) {
      set_t_ecat_rx(from.t_ecat_rx());
    }
    if (from._has_bit(2)) {
      set_t_ecat_wait_shm(from.t_ecat_wait_shm());
    }
    if (from._has_bit(3)) {
      set_t_ecat_shm(from.t_ecat_shm());
    }
    if (from._has_bit(4)) {
      set_t_ecat_wait_tx(from.t_ecat_wait_tx());
    }
    if (from._has_bit(5)) {
      set_t_ecat_tx(from.t_ecat_tx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3MonitorEcDomain::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3MonitorEcDomain::CopyFrom(const M3MonitorEcDomain& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3MonitorEcDomain::IsInitialized() const {
  
  return true;
}

void M3MonitorEcDomain::Swap(M3MonitorEcDomain* other) {
  if (other != this) {
    std::swap(t_ecat_wait_rx_, other->t_ecat_wait_rx_);
    std::swap(t_ecat_rx_, other->t_ecat_rx_);
    std::swap(t_ecat_wait_shm_, other->t_ecat_wait_shm_);
    std::swap(t_ecat_shm_, other->t_ecat_shm_);
    std::swap(t_ecat_wait_tx_, other->t_ecat_wait_tx_);
    std::swap(t_ecat_tx_, other->t_ecat_tx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3MonitorEcDomain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3MonitorEcDomain_descriptor_;
  metadata.reflection = M3MonitorEcDomain_reflection_;
  return metadata;
}

